#!/usr/bin/env python

# {{ ansible_managed }}

from __future__ import print_function
from json import loads, dumps
from sys import exit
import subprocess
import signal
import os


def cmd_exists(cmd):
    return any(
        os.access(os.path.join(path, cmd), os.X_OK)
        for path in os.environ["PATH"].split(os.pathsep)
    )


config_file = '/etc/etckeeper/etckeeper.conf'

output = loads('''{{ {"installed": False,
                      "commit": False,
                      "configured": True,
                      "enabled": etckeeper__enabled|bool
                     } | to_nice_json }}''')

commit_msg = loads('''{{ etckeeper__commit_message_fact | to_json }}''')

output['installed'] = cmd_exists('etckeeper')

if output['enabled'] is True and output['installed'] is True:
    try:
        with open(os.devnull, 'w') as devnull:
            etckeeper_unclean = subprocess.Popen(
                ["/usr/bin/etckeeper unclean"],
                shell=True, stderr=devnull)
            etckeeper_run = etckeeper_unclean.communicate()
            rc = etckeeper_unclean.returncode

            if rc == 0:  # The /etc is unclean
                try:
                    etckeeper_commit = subprocess.Popen(
                        ["/usr/bin/etckeeper commit '" +
                         commit_msg + "'"],
                        shell=True, stdout=devnull, stderr=devnull)
                    etckeeper_run = etckeeper_commit.communicate()
                    output['commit'] = True

                except subprocess.CalledProcessError:
                    pass

    except subprocess.CalledProcessError:
        pass

    if os.path.exists(config_file) and os.path.isfile(config_file):
        try:
            with open(config_file, "r") as f:
                for line in f:
                    if not line.startswith('#') and '=' in line:
                        line = line.strip().split('=')
                        output.update({str(line[0]).lower():
                                       str(line[1]).strip('"')})
        except Exception:
            pass

print(dumps(output, sort_keys=True, indent=4))
