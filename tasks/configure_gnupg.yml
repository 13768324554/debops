---

- name: Check if GnuPG directory exists
  stat:
    path: '{{ reprepro_path + "/" + reprepro_user_prefix + item + "/.gnupg" }}'
  register: reprepro_register_gpg
  with_items: reprepro_repositories

- name: Check if GnuPG snapshot exists on Ansible Controller
  stat:
    path: '{{ secret + "/reprepro/" + ansible_domain + "/snapshots/" + reprepro_domains[0] + "/" + item + "/gnupg.tar" }}'
  with_items: reprepro_repositories
  register: reprepro_register_gpg_snapshot
  delegate_to: 'localhost'
  sudo: False

- name: Restore GnuPG snapshots
  unarchive:
    src: '{{ secret + "/reprepro/" + ansible_domain + "/snapshots/" + reprepro_domains[0] + "/" + item.0.item + "/gnupg.tar" }}'
    dest: '{{ reprepro_path + "/" + reprepro_user_prefix + item.0.item }}'
  with_together:
    - reprepro_register_gpg.results
    - reprepro_register_gpg_snapshot.results
  when: item.0.item == item.1.item and not item.0.stat.exists and item.1.stat.exists

- name: Ensure that ~/.gnupg directory exists
  file:
    path: '{{ reprepro_path + "/" + reprepro_user_prefix + item + "/.gnupg" }}'
    state: 'directory'
    owner: '{{ reprepro_user_prefix + item }}'
    group: '{{ reprepro_group_prefix + item }}'
    mode: '0700'
  with_items: reprepro_repositories

- name: Configure reprepro GnuPG instance
  template:
    src: 'srv/users/reprepro/gnupg/gpg.conf.j2'
    dest: '{{ reprepro_path + "/" + reprepro_user_prefix + item + "/.gnupg/gpg.conf" }}'
    owner: '{{ reprepro_user_prefix + item }}'
    group: '{{ reprepro_group_prefix + item }}'
    mode: '0644'
  with_items: reprepro_repositories

- name: Create repository key template
  template:
    src: 'srv/users/reprepro/gpg-key-template.j2'
    dest: '{{ reprepro_path + "/" + reprepro_user_prefix + item + "/gpg-key-template" }}'
    owner: '{{ reprepro_user_prefix + item }}'
    group: '{{ reprepro_group_prefix + item }}'
    mode: '0644'
  with_items: reprepro_repositories

- name: Generate automatic signing key
  command: gpg --batch --gen-key gpg-key-template chdir=~
           creates=~/.gnupg/secring.gpg
  sudo_user: '{{ reprepro_user_prefix + item }}'
  with_items: reprepro_repositories

- name: Create or update archive of ~/.gnupg directory
  shell: tar uvpf gnupg.tar .gnupg && tar dpf gnupg.tar .gnupg || (
         tar cvpf gnupg.tar .gnupg) ; chmod 0600 ~/gnupg.tar chdir=~
  sudo_user: '{{ reprepro_user_prefix + item }}'
  with_items: reprepro_repositories
  changed_when: False

- name: Upload ~/.gnupg archive to Ansible Controller
  fetch:
    src: '{{ reprepro_path + "/" + reprepro_user_prefix + item + "/gnupg.tar" }}'
    dest: '{{ secret + "/reprepro/" + ansible_domain + "/snapshots/" + reprepro_domains[0] + "/" + item + "/gnupg.tar" }}'
    flat: True
  with_items: reprepro_repositories

- name: Export automatic signing key
  shell: 'gpg --armor --export "{{ reprepro_gpg_email_prefix + item + reprepro_gpg_email_suffix }}" > {{ reprepro_repository_path + "/" + item + "/" + reprepro_domains[0] + ".asc" }} creates={{ reprepro_repository_path + "/" + item + "/" + reprepro_domains[0] + ".asc" }}'
  sudo_user: '{{ reprepro_user_prefix + item }}'
  with_items: reprepro_repositories

