---
# vim: foldmarker=[[[,]]]:foldmethod=marker

# ownCloud ./config/ [[[

- name: Install ownCloud config file
  template:
    src: 'srv/www/sites/config/debops.config.php.j2'
    dest: '{{ owncloud__deploy_path }}/config/debops.config.php'
    owner: '{{ owncloud__user }}'
    group: '{{ owncloud__group }}'
    mode: '0640'

- name: Install ownCloud mail config file
  template:
    src: 'srv/www/sites/config/mail.config.php.j2'
    dest: '{{ owncloud__deploy_path }}/config/mail.config.php'
    owner: '{{ owncloud__user }}'
    group: '{{ owncloud__group }}'
    mode: '0640'
  tags: [ 'role::owncloud:mail' ]

- name: Ensure deprecated configuration files are absent
  file:
    path: '{{ item }}'
    state: 'absent'
  with_flattened:
    - '{{ owncloud__deploy_path }}/config/custom.config.php'

# .. ]]]

# Logging [[[
  ## ownCloud as of Version 9.0 does not do log rotate by default. This could
  ## be enabled by `log_rotate_size`. `logrotate` is used in DebOps.
- name: Setup logrotate for owncloud
  template:
    src: 'etc/logrotate.d/owncloud.j2'
    dest: '/etc/logrotate.d/owncloud'
    owner: 'root'
    group: 'root'
    mode: '0644'
# .. ]]]

# Setup the occ command [[[

- name: Allow to use the PHP CLI even if OCMemcacheAPCu is used
  template:
    src: 'etc/php5/cli/conf.d/enable_apc.ini.j2'
    dest: '/etc/php5/cli/conf.d/enable_apc.ini'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: owncloud__enable_apc_cli
  tags: [ 'role::owncloud:occ' ]

- name: Setup shortcut for the occ command
  template:
    src: 'usr/local/bin/occ.j2'
    dest: '{{ owncloud__occ_bin_file_path }}'
    owner: 'root'
    group: '{{ owncloud__group }}'
    mode: 0755
  tags: [ 'role::owncloud:occ' ]

# .. ]]]

# Auto setup [[[

- name: Get ownCloud setup status
  command: '{{ owncloud__occ_bin_file_path | quote }} check'
  register: owncloud__register_occ_check
  changed_when: False

- name: Determine if ownCloud autosetup should be done
  set_fact:
    owncloud__do_autosetup: '{{ (owncloud__autosetup and
                                 owncloud__admin_username != "" and
                                 owncloud__register_occ_check is defined and
                                 "ownCloud is not installed" in owncloud__register_occ_check.stdout) }}'

- name: Automatically finish setup via the occ tool
  command: |
           {{ owncloud__occ_bin_file_path | quote }} maintenance:install
           --data-dir '{{ owncloud__data_path }}'
           --database '{{ owncloud__database_map[owncloud__database].dbtype }}'
           --database-name '{{ owncloud__database_map[owncloud__database].dbname }}'
           --database-host '{{ owncloud__database_map[owncloud__database].dbhost }}'
           --database-user '{{ owncloud__database_map[owncloud__database].dbuser }}'
           --database-pass '{{ owncloud__database_map[owncloud__database].dbpass }}'
           {% if owncloud__admin_username != False %}
           --admin-user '{{ owncloud__admin_username }}'
           --admin-pass '{{ owncloud__admin_password }}'
           {% endif %}
  ## FIXME: Enable after testing!
  # no_log: True
  register: owncloud__register_occ_install
  when: owncloud__do_autosetup|bool and owncloud__release not in [ '8.0' ]
  ## Did not work with 8.1.6-2.1 because of https://github.com/owncloud/core/issues/17583
  ## Falling back to URL auto install method.
  ## FIXME: [Errno 2] No such file or directory

- name: Install ownCloud autoconfig file
  template:
    src: 'srv/www/sites/config/autoconfig.php.j2'
    dest: '{{ owncloud__deploy_path }}/config/autoconfig.php'
    owner: '{{ owncloud__user }}'
    group: '{{ owncloud__group }}'
    mode: '0660'
  register: owncloud__register_autoconfig
  when: owncloud__do_autosetup|bool and owncloud__release in [ '8.0' ]

- name: Test availability of automatically finish setup
  uri:
    url: '{{ owncloud__autosetup_url }}'
    status_code: '200,401'
  register: owncloud__auto_finish_setup
  when: not owncloud__register_autoconfig|skipped

- name: Automatically finish setup via URL request
  uri:
    url: '{{ owncloud__autosetup_url }}'
  when: owncloud__auto_finish_setup is defined and
        owncloud__auto_finish_setup.status is defined and
        owncloud__auto_finish_setup.status|int != 200

# .. ]]]

# ownCloud raw occ commands [[[

- name: Combine owncloud__apps_config variables
  set_fact:
    owncloud__apps_config_combined: '{{
                owncloud__apps_config
      | combine(owncloud__apps_config_group)
      | combine(owncloud__apps_config_host) }}'
  tags: [ 'role::owncloud:occ_config' ]

- name: Get current ownCloud configuration via occ config:list
  include: 'run_occ.yml'
  loop_control:
    loop_var: 'owncloud__occ_item'
  tags: [ 'role::owncloud:occ_config' ]
  when: (owncloud__apps_config_combined.keys() | length)
  with_flattened:
    - command: 'config:list'
      get_output: True

- name: Capture occ output in variable
  set_fact:
    owncloud__occ_config_current: '{{ owncloud__occ_run_output }}'
  when: (owncloud__apps_config_combined.keys() | length)
  tags: [ 'role::owncloud:occ_config' ]

- name: Set ownCloud apps configuration for each app
  include: 'run_occ_app_set.yml'
  loop_control:
    loop_var: 'owncloud__apps_item'
  with_dict: '{{ owncloud__apps_config_combined }}'
  tags: [ 'role::owncloud:occ_config' ]

# .. ]]]

# Run occ commands as specified in the inventory [[[
- name: Run occ commands as specified in the inventory
  include: 'run_occ.yml'
  loop_control:
    loop_var: 'owncloud__occ_item'
  tags: [ 'role::owncloud:occ' ]
  with_flattened:
    - '{{ owncloud__run_occ_global_commands }}'
    - '{{ owncloud__run_occ_group_commands }}'
    - '{{ owncloud__run_occ_host_commands }}'
# .. ]]]

# Configure cron job for background tasks [[[

- name: Use cron for background tasks (lib/private/...)
  lineinfile:
    dest: '{{ owncloud__deploy_path }}/lib/private/backgroundjob.php'
    state: 'present'
    regexp: 'return OC_Appconfig::getValue'
    line: "                return OC_Appconfig::getValue( 'core', 'backgroundjobs_mode', 'cron' );"
  when: owncloud__config_file is defined and not owncloud__config_file.stat.exists and owncloud__release in [ '7.0' ]
  ## FIXME(ypid): Not sure if it was 7.0 or if it still works for 8.0. Anyway. Scheduled for removal on 2016-10
  ## https://github.com/owncloud/core/wiki/Maintenance-and-Release-Schedule

  ## Does not match/is not needed for ownCloud above version 7.0
- name: Use cron for background jobs (settings/admin.php)
  lineinfile:
     dest: '{{ owncloud__deploy_path }}/settings/admin.php'
     state: 'present'
     regexp: "'backgroundjobs_mode', OC_Appconfig::getValue"
     line: "$tmpl->assign('backgroundjobs_mode', OC_Appconfig::getValue('core', 'backgroundjobs_mode', 'cron'));"
  when: owncloud__release in [ '7.0' ] and not owncloud__config_file

- name: Setup cron service
  cron:
    name: 'ownCloud Background Jobs'
    minute: '{{ owncloud__cron_minute }}'
    user: '{{ owncloud__user }}'
    job: '/usr/bin/php -f {{ owncloud__deploy_path }}/cron.php'
    cron_file: 'owncloud'

# .. ]]]

# ownCloud upgrades [[[

- name: Install the package manager hook script for auto ownCloud DB upgrades
  template:
    src: 'usr/local/bin/owncloud_db_upgrade_hook.j2'
    dest: '{{ owncloud__auto_database_upgrade_hook_script }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags: [ 'role::owncloud:auto_upgrade' ]

- name: Enable the package manager hook for auto ownCloud DB upgrades
  template:
    src: 'etc/apt/apt.conf.d/db_upgrade.j2'
    dest: '/etc/apt/apt.conf.d/80ownCloud-db-upgrade'
    owner: 'root'
    group: 'root'
    mode: '0644'
  tags: [ 'role::owncloud:auto_upgrade' ]
  when: (owncloud__auto_database_upgrade_enabled | bool)

- name: Disable the package manager hook for auto ownCloud DB upgrades
  file:
    path: '/etc/apt/apt.conf.d/80ownCloud-db-upgrade'
    state: 'absent'
  when: not (owncloud__auto_database_upgrade_enabled | bool)

# .. ]]]
