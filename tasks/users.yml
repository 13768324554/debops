---

- name: Create user groups
  group:
    name: '{{ item.group | default(item.name) }}'
    system: '{{ item.system | d((True | bool) if (users_default_system | bool) else omit) }}'
    gid: '{{ item.gid | default(omit) }}'
    state: 'present'
  with_flattened:
    - '{{ users_default }}'
    - '{{ users_admins }}'
    - '{{ users_groups }}'
    - '{{ users_list }}'
    - '{{ users_group_list }}'
    - '{{ users_host_list }}'
  when: ((item.name is defined and item.name and item.name != 'root') and
         (item.state|d('present') != 'absent'))

- name: Manage user accounts
  user:
    name:               '{{ item.name }}'
    uid:                '{{ item.uid                | d(omit) }}'
    group:              '{{ item.group              | d(item.name) }}'
    state:              '{{ item.state              | d("present") }}'
    comment:            '{{ item.comment            | d(omit) }}'
    password:           '{{ item.password           | d("*") }}'
    update_password:    '{{ item.update_password    | d("on_create") }}'
    system:             '{{ item.system             | d(True if (users_default_system | bool) else omit) }}'
    shell:              '{{ item.shell              | d(omit) }}'
    home:               '{{ item.home               | d(omit) }}'
    createhome:         '{{ item.createhome         | d(omit) }}'
    move_home:          '{{ item.move_home          | d(omit) }}'
    skeleton:           '{{ item.skeleton           | d(omit) }}'
    expires:            '{{ item.expires            | d(omit) }}'
    remove:             '{{ item.remove             | d(omit) }}'
    force:              '{{ item.force              | d(omit) }}'
    generate_ssh_key:   '{{ item.generate_ssh_key   | d(omit) }}'
    ssh_key_bits:       '{{ item.ssh_key_bits       | d(omit) }}'
    ssh_key_comment:    '{{ item.ssh_key_comment    | d(omit) }}'
    ssh_key_file:       '{{ item.ssh_key_file       | d(omit) }}'
    ssh_key_passphrase: '{{ item.ssh_key_passphrase | d(omit) }}'
    ssh_key_type:       '{{ item.ssh_key_type       | d(omit) }}'
  with_flattened:
    - '{{ users_default }}'
    - '{{ users_admins }}'
    - '{{ users_list }}'
    - '{{ users_group_list }}'
    - '{{ users_host_list }}'
  when: ((item.name is defined and item.name and item.name != 'root') and
         (item.state|d('present') != 'absent'))

- name: Manage user home directories
  file:
    path: '{{ item.home | default("~" + item.name) }}'
    state: 'directory'
    owner: '{{ item.home_owner | default(omit) }}'
    group: '{{ item.home_group | default(omit) }}'
    mode: '{{ item.home_mode | default(omit) }}'
  with_flattened:
    - '{{ users_default }}'
    - '{{ users_admins }}'
    - '{{ users_list }}'
    - '{{ users_group_list }}'
    - '{{ users_host_list }}'
  when: ((item.name is defined and item.name and item.name != 'root') and
         (item.state|d('present') != 'absent') and
         item.createhome|d(True) and
         (item.home_owner|d() or item.home_group|d() or item.home_mode|d()))

- name: Get list of available groups
  shell: 'getent group | cut -f1 -d:'
  register: users_register_groups
  changed_when: False
  always_run: yes

- name: Manage user default groups
  user:
    name: '{{ item.name }}'
    state: '{{ item.state | default("present") }}'
    groups: '{{ (users_default_groups_list | intersect(users_register_groups.stdout_lines)) | join(",") }}'
    append: '{{ users_default_groups_append }}'
  with_flattened:
    - '{{ users_default }}'
    - '{{ users_admins }}'
    - '{{ users_list }}'
    - '{{ users_group_list }}'
    - '{{ users_host_list }}'
  when: ((item.name is defined and item.name and item.name != 'root') and
         (item.state|d('present') != 'absent') and
         (users_default_groups_list is defined and users_default_groups_list))

- name: Manage user groups
  user:
    name: '{{ item.name }}'
    state: '{{ item.state | default("present") }}'
    groups: '{{ (item.groups | intersect(users_register_groups.stdout_lines)) | join(",") }}'
    append: '{{ item.append | default("yes") }}'
  with_flattened:
    - '{{ users_default }}'
    - '{{ users_admins }}'
    - '{{ users_list }}'
    - '{{ users_group_list }}'
    - '{{ users_host_list }}'
  when: ((item.name is defined and item.name and item.name != 'root') and
         (item.state|d('present') != 'absent') and
         (item.groups is defined and item.groups))

- name: Remove user groups if requested
  group:
    name: '{{ item.group | default(item.name) }}'
    state: 'absent'
  with_flattened:
    - '{{ users_default }}'
    - '{{ users_admins }}'
    - '{{ users_groups }}'
    - '{{ users_list }}'
    - '{{ users_group_list }}'
    - '{{ users_host_list }}'
  when: ((item.name is defined and item.name and item.name != 'root') and
         (item.state|d('present') == 'absent'))

