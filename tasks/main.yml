---

- name: Ensure apparmor packages are installed
  apt:
    name: '{{ item }}'
    state: 'latest'
    install_recommends: False
  with_flattened:
    - '{{ apparmor_packages }}'

- name: Setup apparmor=1 security=apparmor as kernel parameter
  lineinfile:
    dest: '/etc/default/grub'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    insertbefore: '{{ item.insertbefore }}'
  when: apparmor_enable is defined and apparmor_enable
  with_items:
    - regexp: '^GRUB_CMDLINE_LINUX='
      line: 'GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR {{ apparmor_additional_kernel_parameters }}"'
      insertbefore: ''
    - regexp: '^GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR='
      line: 'GRUB_CMDLINE_LINUX_ANSIBLE_APPARMOR="apparmor=1 security=apparmor"'
      insertbefore: '^GRUB_CMDLINE_LINUX='
  notify: [ 'Update grub' ]

# Needed because Ansible will halt if the service can not be started.
- meta: flush_handlers

- name: Remove apparmor=1 security=apparmor from kernel parameter list
  lineinfile:
    dest: '/etc/default/grub'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    insertbefore: '{{ item.insertbefore }}'
  when: apparmor_enable is not defined or not apparmor_enable
  with_items:
    - regexp: '^GRUB_CMDLINE_LINUX='
      line: 'GRUB_CMDLINE_LINUX="{{ apparmor_additional_kernel_parameters }}"'
      insertbefore: ''
  notify: [ 'Update grub' ]

- command: service apparmor teardown
  when: apparmor_enable is not defined or not apparmor_enable

- name: Stop service apparmor
  service:
    name: 'apparmor'
    state: 'stopped'
    enabled: no
  when: apparmor_enable is not defined or not apparmor_enable

- name: Check if running kernel has apparmor already enabled
  command: egrep 'apparmor=1\s+security=apparmor' /proc/cmdline
  register: apparmor_enabled
  when: apparmor_enable is defined and apparmor_enable
  failed_when: False
  changed_when: False

- name: You have to reboot the system if apparmor is not yet enabled
  debug:
    msg: 'You have to reboot the system to enable apparmor.'
  when: apparmor_enabled is defined and apparmor_enabled.rc != 0

- name: Put all profiles into enforcement mode
  command: |
    sh -c 'find /etc/apparmor.d -maxdepth 1 -type f | while read file
    do
        if grep --quiet "flags\s*=.*complain" "$file"; then
          aa-enforce "$file";
        fi;
    done'
  register: apparmor_enforce_all_profiles_cmd
  changed_when: apparmor_enforce_all_profiles_cmd.stdout != ""
  when: apparmor_enforce_all_profiles is defined and apparmor_enforce_all_profiles

- name: Ensure apparmor service is started
  service:
    name: 'apparmor'
    state: 'started'
    enabled: yes
  when: apparmor_enable is defined and apparmor_enable
