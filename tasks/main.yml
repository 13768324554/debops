---

- name: Raw update APT repositories and install mandatory packages
  raw:  'apt-get update ; apt-get --no-install-recommends -yq install {{ bootstrap__mandatory_packages | join(" ") }}'
  tags: [ 'role::bootstrap:packages' ]
  when: bootstrap__raw|bool

# .. Package install of essential software (((
- name: Make sure essential software is installed
  apt:
    name: '{{ item }}'
    state: 'present'
    update_cache: True
    cache_valid_time: '3600'
    install_recommends: False
  tags: [ 'role::bootstrap:packages' ]
  with_flattened:
    - '{{ bootstrap__mandatory_packages }}'
    - '{{ bootstrap__base_packages }}'
    - '{{ bootstrap__packages }}'
# .. )))

# .. Ansible facts (((
- name: Install custom Ansible local facts
  copy:
    src: 'etc/ansible/facts.d/'
    dest: '/etc/ansible/facts.d/'
    owner: 'root'
    group: 'root'
    mode: '0755'
  tags: [ 'role::bootstrap:hostname' ]

- name: Gather host facts
  action: setup
# .. )))

# .. System administrator account (((
- name: Create specified system groups
  group:
    name: '{{ item }}'
    state: 'present'
    system: True
  tags: [ 'role::bootstrap:admin' ]
  when: bootstrap__admin|bool
  with_items: '{{ bootstrap__admin_groups }}'

- name: Check if potential administrator account exists
  shell: getent passwd {{ bootstrap__admin_name }} || true
  register: bootstrap__register_admin_account
  tags: [ 'role::bootstrap:admin' ]
  when: not bootstrap__admin_manage_existing|bool
  changed_when: False
  always_run: True

- name: Set admin manage existing to true
  set_fact:
    bootstrap__register_admin_account:
      stdout: False
  tags: [ 'role::bootstrap:admin' ]
  when: bootstrap__admin_manage_existing|bool

- name: Create administrator group
  group:
    name: '{{ bootstrap__admin_name }}'
    state: 'present'
    system: '{{ bootstrap__admin_system|bool }}'
  tags: [ 'role::bootstrap:admin' ]
  when: (bootstrap__admin|bool and not bootstrap__register_admin_account.stdout)

- name: Create administrator account
  user:
    name: '{{ bootstrap__admin_name }}'
    state: 'present'
    system: '{{ bootstrap__admin_system|bool }}'
    group: '{{ bootstrap__admin_name }}'
    groups: '{{ bootstrap__admin_groups | join(",") }}'
    append: True
    home: '{{ bootstrap__admin_system_home
              if (bootstrap__admin_system|bool)
              else bootstrap__admin_home }}'
    shell: '{{ bootstrap__admin_shell }}'
    comment: '{{ bootstrap__admin_comment }}'
  tags: [ 'role::bootstrap:admin' ]
  when: (bootstrap__admin|bool and not bootstrap__register_admin_account.stdout)

- name: Set admin home directory group and permissions
  file:
    path: '{{ bootstrap__admin_system_home
              if (bootstrap__admin_system|bool)
              else bootstrap__admin_home }}'
    group: '{{ bootstrap__admin_home_group }}'
    mode:  '{{ bootstrap__admin_home_mode }}'
  tags: [ 'role::bootstrap:admin' ]
  when: (bootstrap__admin|bool and not bootstrap__register_admin_account.stdout)
# .. )))

# .. SSH public key access (((
- name: Install ssh public key on root account
  authorized_key:
    user: 'root'
    key: '{{ bootstrap__admin_sshkeys | join("\n") | string }}'
    state: 'present'
  tags: [ 'role::bootstrap:admin' ]
  when: bootstrap__admin|bool
  failed_when: (bootstrap__admin_sshkeys is undefined or
                (bootstrap__admin_sshkeys is defined and not bootstrap__admin_sshkeys))

- name: Install ssh public key on administrator account
  authorized_key:
    user: '{{ bootstrap__admin_name }}'
    key: '{{ bootstrap__admin_sshkeys | join("\n") | string }}'
    state: 'present'
  tags: [ 'role::bootstrap:admin' ]
  when: bootstrap__admin|bool
  failed_when: (bootstrap__admin_sshkeys is undefined or
                (bootstrap__admin_sshkeys is defined and not bootstrap__admin_sshkeys))
# .. )))

# .. Access to sudo commands (((
- name: Configure system group with passwordless access in sudo
  ## `lineinfile` is used instead of `template` to allow other roles to take
  ## over `sudo` management and prevent one role reverting the work of the
  ## other role.
  lineinfile:
    dest: '/etc/sudoers.d/{{ bootstrap__sudo_group }}'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    state: 'present'
    create: True
    owner: 'root'
    group: 'root'
    mode: '0440'
    validate: 'visudo -cf "%s"'
  tags: [ 'role::bootstrap:admin' ]
  with_items:
    - regexp: '^Defaults: %{{ bootstrap__sudo_group }} !?requiretty'
      line:    'Defaults: %{{ bootstrap__sudo_group }} !requiretty'
    - regexp: '^Defaults: %{{ bootstrap__sudo_group }} env_check\s'
      line:    'Defaults: %{{ bootstrap__sudo_group }} env_check += "SSH_CLIENT"'
    - regexp: '^%{{ bootstrap__sudo_group }}\s'
      line:    '%{{ bootstrap__sudo_group }} ALL = (ALL:ALL) NOPASSWD: SETENV: ALL'
  when: bootstrap__sudo|bool

- name: Ensure /etc/sudoers includes /etc/sudoers.d
  lineinfile:
    dest: '/etc/sudoers'
    regexp: '^#includedir\s+/etc/sudoers.d$'
    line: '#includedir /etc/sudoers.d'
    state: 'present'
    validate: 'visudo -cf "%s"'
  tags: [ 'role::bootstrap:admin' ]

- name: Make sure that administrator account is in passwordless sudo group
  user:
    name: '{{ bootstrap__admin_name }}'
    state: 'present'
    groups: '{{ bootstrap__sudo_group }}'
    append: True
  tags: [ 'role::bootstrap:admin' ]
  when: (bootstrap__admin|bool and bootstrap__sudo|bool)
# .. )))

# .. Hostname and domain (((
- name: Enforce new hostname
  hostname:
    name: '{{ bootstrap__hostname }}'
  tags: [ 'role::bootstrap:hostname' ]
  when: (bootstrap__hostname != ansible_hostname and
         ansible_local|d() and ansible_local.cap12s|d() and
         (not ansible_local.cap12s.enabled|bool or
         'cap_sys_admin' in ansible_local.cap12s.list))

- name: Save hostname in /etc/hostname
  copy:
    content: '{{ bootstrap__hostname }}'
    dest: '/etc/hostname'
    owner: 'root'
    group: 'root'
    mode: '0644'
  tags: [ 'role::bootstrap:hostname' ]
  when: (bootstrap__hostname != ansible_hostname and
         ansible_local|d() and ansible_local.cap12s|d() and
         (not ansible_local.cap12s.enabled|bool or
         'cap_sys_admin' in ansible_local.cap12s.list))

- name: Save hostname and domain in /etc/hosts
  lineinfile:
    state: 'present'
    dest: '/etc/hosts'
    insertbefore: '{{ item.insertbefore | default(omit) }}'
    insertafter: '{{ item.insertafter | default(omit) }}'
    regexp: '{{ "^" + (item.ip_address | replace(".","\.")) }}'
    ## https://github.com/ansible/ansible-modules-core/issues/1892
    line: "{{ item.ip_address + '\t' + (bootstrap__hostname | d(ansible_hostname)) +
              (( '.' + bootstrap__domain + '\t' + (bootstrap__hostname | d(ansible_hostname)) )
              if bootstrap__domain|d()
              else '') }}"
  tags: [ 'role::bootstrap:hostname' ]
  when: ((item.type == 'inet6' and bootstrap__hostname_v6_loopback|d()) or item.type == 'inet4')
  with_items:
    - ip_address: '{{ bootstrap__ipv4 | default("127.0.1.1") }}'
      insertafter: '{{ "^127.0.0.1" | replace(".", "\.") }}'
      type: 'inet4'
    - ip_address: '{{ bootstrap__ipv6 | default("0::1") }}'
      insertbefore: '^::1'
      type: 'inet6'

# .. )))
