---

- name: Install required packages
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_items: '{{ mailman_packages }}'

- name: Apply patches to Mailman source code
  patch:
    src: 'patches/{{ item }}.patch'
    basedir: '/usr/lib/mailman'
  with_items: '{{ mailman_patch_list }}'
  register: mailman_register_patches
  when: mailman_patch | bool
  notify: [ 'Restart mailman' ]
  tags: [ 'role::mailman:patch' ]

# mailman package forgets configuration preconfigured by debconf
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=339059
# Because of that we need to reconfigure it after installation

- name: Check current language settings in debconf
  debconf:
    name: 'mailman'
  register: mailman__register_debconf
  tags: [ 'role::mailman:patch', 'role::mailman:lang' ]

- name: Preconfigure language list in debconf
  debconf:
    name: 'mailman'
    question: 'mailman/site_languages'
    vtype: 'multiselect'
    value: '{{ (lookup("template", "lookup/mailman__languages.j2") | from_yaml) | join(", ") }}'
  register: mailman_register_debconf_question1
  tags: [ 'role::mailman:lang' ]

- name: Preconfigure default language in debconf
  debconf:
    name: 'mailman'
    question: 'mailman/default_server_language'
    vtype: 'select'
    value: '{{ lookup("template", "lookup/mailman__site_language.j2") | from_yaml }}'
  register: mailman_register_debconf_question2
  tags: [ 'role::mailman:lang' ]

- name: Reconfigure mailman package
  shell: dpkg-reconfigure --frontend noninteractive mailman
  register: mailman_package_reconfigure
  when: (mailman_register_debconf_question1.changed|bool or
         mailman_register_debconf_question2.changed|bool)
  tags: [ 'role::mailman:lang' ]

- name: Run language pack conversion script
  script: scripts/convert-mailman-to-utf8 {{ (mailman__default_languages + mailman__languages + mailman__register_debconf.current["mailman/used_languages"].split(" ") | unique) | join(' ') }}
  register: mailman_register_convert_script
  changed_when: mailman_register_convert_script.stdout
  when: ((mailman_register_patches|d() and mailman_register_patches.changed|bool) or
         (mailman_register_debconf_question1|d() and mailman_register_debconf_question1.changed|bool) or
         (mailman_register_debconf_question2|d() and mailman_register_debconf_question2.changed|bool))
  tags: [ 'role::mailman:patch', 'role::mailman:lang' ]

- name: Configure Mailman
  template: src=etc/mailman/mm_cfg.py.j2 dest=/etc/mailman/mm_cfg.py
            owner=root group=root mode=0644
  notify: [ 'Restart mailman' ]

- name: Configure Postfix transport map
  template: src=etc/mailman/postfix_transport.j2 dest=/etc/mailman/postfix_transport
            owner=root group=root mode=0644
  register: mailman_register_postfix_transport

- name: Generate postfix_transport map
  command: /usr/sbin/postmap /etc/mailman/postfix_transport
  when: mailman_register_postfix_transport is defined and
        mailman_register_postfix_transport.changed

- name: Create Mailman site list
  shell: yes | newlist --language={{ mailman__site_language }} {{ mailman_site_list }} {{ mailman_site_admin }}
         {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/list/' + mailman__site_domain + '/' + mailman_site_list + '/admin/password chars=ascii,numbers,digits,hexdigits length=' + mailman_site_password_length) }}
  args:
    creates: '/var/lib/mailman/lists/{{ mailman_site_list }}/config.pck'
  become_user: 'list'
  register: mailman_register_site_list
  no_log: True

- name: Set site administrator password
  command: mmsitepass {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/site/site_administrator_password chars=ascii,numbers,digits,hexdigits length=' + mailman_site_password_length) }}
  when: mailman_register_site_list.changed|bool
  no_log: True

- name: Set list creator password
  command: mmsitepass -c {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/site/list_creator_password chars=ascii,numbers,digits,hexdigits length=' + mailman_site_password_length) }}
  when: mailman_register_site_list.changed|bool
  no_log: True

- name: Remove Mailman lists if requested
  command: rmlist {% if item.purge is defined and item.purge %} --archives {% endif %}
           {{ item.name }} removes=/var/lib/mailman/lists/{{ item.name }}/config.pck
  with_items: mailman_lists
  sudo_user: 'list'
  when: item.name is defined and item.name and item.state is defined and item.state == 'absent'

- name: Create Mailman lists
  shell: yes | newlist --language={{ item.language | default(mailman__site_language) }}
         {% if item.notify is defined and not item.notify %} --quiet {% endif %}
         {% if item.domain is defined and item.domain %}
         --urlhost={{ item.domain }} --emailhost={{ item.domain }}
         {% endif %}
         {{ item.name }} {{ item.owner | default(mailman_site_admin) }}
         {% if item.password is defined and item.password %}
         {{ item.password }}
         {% else %}
         {% if item.domain is defined and item.domain %}
         {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/list/' + item.domain + '/' + item.name + '/owner/password chars=ascii,numbers,digits,hexdigits length=' + mailman_admin_password_length) }}
         {% else %}
         {% if mailman_domains is defined and mailman_domains %}
         {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/list/' + mailman_domains[0] + '/' + item.name + '/owner/password chars=ascii,numbers,digits,hexdigits length=' + mailman_admin_password_length) }}
         {% else %}
         {{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/mailman/list/' + ansible_fqdn + '/' + item.name + '/owner/password chars=ascii,numbers,digits,hexdigits length=' + mailman_admin_password_length) }}
         {% endif %}
         {% endif %}
         {% endif %}
         creates=/var/lib/mailman/lists/{{ item.name }}/config.pck
  with_items: mailman_lists
  sudo_user: 'list'
  when: item.name is defined and item.name and secret is defined and secret and
        ((item.state is defined and item.state == 'present') or item.state is undefined)
  no_log: True

