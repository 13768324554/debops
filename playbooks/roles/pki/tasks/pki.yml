---

- name: Ensure OpenSSL support is installed
  apt: pkg={{ item }} state=latest install_recommends=no
  with_items: [ 'openssl', 'openssl-blacklist', 'ca-certificates', 'ssl-cert' ]
  tags: [ 'pki' ]

- name: Manage certificate directory structure
  file: path={{ pki_path }}/{{ item }} state=directory owner=root group=root mode=0755
  with_items: [ 'host/selfsigned', 'host/signed', 'host/req', 'host/csr', 'host/crl', 'ca/certs', 'ca/crl', 'wildcard/certs', 'wildcard/crl' ]
  tags: [ 'pki' ]

- name: Manage private directory structure
  file: path={{ pki_path }}/{{ item }} state=directory owner=root group={{ pki_private_group }} mode=0710
  with_items: [ 'host/private', 'wildcard/private' ]
  tags: [ 'pki' ]

- name: Create local directory structure on Ansible controller
  local_action: file path={{ secret }}/pki/{{ item }} state=directory
  with_items: [ 'ca/certs', 'ca/crl', 'wildcard/certs', 'wildcard/crl', 'wildcard/private' ]
  sudo: no
  when: secret is defined and secret
  tags: [ 'pki' ]

- name: Configure certificate request template
  template: src=srv/pki/host/req/openssl.cnf.j2
            dest={{ pki_path }}/host/req/{{ item.cn }}.cnf
            owner=root group=root mode=0644
  with_items:
    - ${pki_default_certificate}
    - ${pki_host_certificates}
  when: item.cn is defined and item.cn
  tags: [ 'pki' ]

- name: Generate certificate keys
  command: openssl genrsa -out {{ pki_path }}/host/private/{{ item.cn }}.key {{ pki_bits }}
           creates={{ pki_path }}/host/private/{{ item.cn }}.key
  with_items:
    - ${pki_default_certificate}
    - ${pki_host_certificates}
  when: item.cn is defined and item.cn
  tags: [ 'pki' ]

- name: Set correct permissions for certificate keys
  file: path={{ pki_path }}/host/private/{{ item.cn }}.key state=file owner=root group={{ pki_private_group }} mode=0440
  with_items:
    - ${pki_default_certificate}
    - ${pki_host_certificates}
  when: item.cn is defined and item.cn
  tags: [ 'pki' ]

- name: Create certificate requests
  command: openssl req -new -utf8 -config {{ pki_path }}/host/req/{{ item.cn }}.cnf -out {{ pki_path }}/host/csr/{{ item.cn }}.csr
           creates={{ pki_path }}/host/csr/{{ item.cn }}.csr
  with_items:
    - ${pki_default_certificate}
    - ${pki_host_certificates}
  when: item.cn is defined and item.cn
  tags: [ 'pki' ]

- name: Create self-signed certificates
  command: openssl x509 -req -extfile {{ pki_path }}/host/req/{{ item.cn }}.cnf -extensions v3_ca -in {{ pki_path }}/host/csr/{{ item.cn }}.csr -out {{ pki_path }}/host/selfsigned/{{ item.cn }}.crt -signkey {{ pki_path }}/host/private/{{ item.cn }}.key -days {{ pki_selfsign_days }}
         creates={{ pki_path }}/host/selfsigned/{{ item.cn }}.crt
  with_items:
    - ${pki_default_certificate}
    - ${pki_host_certificates}
  when: item.cn is defined and item.cn
  tags: [ 'pki' ]

- name: Upload certificate requests
  fetch: src={{ pki_path }}/host/csr/{{ item.cn }}.csr
         dest={{ secret }}/pki/hosts/{{ ansible_fqdn }}/csr/{{ item.cn }}.csr
         flat=yes
  with_items:
    - ${pki_default_certificate}
    - ${pki_host_certificates}
  when: item.cn is defined and item.cn and secret is defined and secret
  tags: [ 'pki' ]

- name: Download CA certificates
  copy: src={{ secret }}/pki/ca/{{ item }}/
        dest={{ pki_path }}/ca/{{ item }}/
        owner=root group=root mode=0644
  with_items: [ 'certs', 'crl' ]
  when: secret is defined and secret
  notify: Update ca-certificates
  tags: [ 'pki' ]

- name: Download Wildcard certificates
  copy: src={{ secret }}/pki/wildcard/{{ item }}/
        dest={{ pki_path }}/wildcard/{{ item }}/
        owner=root group=root mode=0644
  with_items: [ 'certs', 'crl' ]
  when: secret is defined and secret and pki_wildcard is defined and pki_wildcard
  notify: Update ca-certificates
  tags: [ 'pki' ]

- name: Download Wildcard private keys
  copy: src={{ secret }}/pki/wildcard/private/
        dest={{ pki_path }}/wildcard/private/
        owner=root group={{ pki_private_group }} mode=0440
  when: secret is defined and secret and pki_wildcard is defined and pki_wildcard
  tags: [ 'pki' ]

  # Without this Ansible gives fatal error on next task
- name: Create local certificate directory on Ansible controller
  local_action: file path={{ secret }}/pki/hosts/{{ ansible_fqdn }}/{{ item }} state=directory
  with_items: [ 'signed', 'crl' ]
  sudo: no
  when: secret is defined and secret
  tags: [ 'pki' ]

- name: Download host certificates
  copy: src={{ secret }}/pki/hosts/{{ ansible_fqdn }}/{{ item }}/
        dest={{ pki_path }}/host/{{ item }}/
        owner=root group=root mode=0644
  with_items: [ 'signed', 'crl' ]
  when: secret is defined and secret
  tags: [ 'pki' ]

- name: Symlink CA certificates
  shell: find {{ pki_path }}/ca/certs -name '*.crt' -type f -exec ln -s {} /usr/local/share/ca-certificates/ \;
  changed_when: False
  tags: [ 'pki' ]

- name: Flush handlers if required
  meta: flush_handlers
  tags: [ 'pki' ]

