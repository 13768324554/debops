---

dependencies:
  - role: debops.secret

  - role: debops.apt_preferences
    tags: apt_preferences
    apt_preferences_dependent_list:
      - package: 'redis-server'
        backports: [ 'wheezy' ]
        reason: 'Critical bugs in older versions - http://download.redis.io/redis-stable/00-RELEASENOTES'
        by_role: 'debops.redis'

  - role: debops.etc_services
    etc_services_dependency_list:
      - name: 'redis-server'
        port: '{{ redis_port }}'
      - name: 'redis-sentinel'
        port: '{{ redis_sentinel_port }}'

  - role: debops.ferm
    ferm_input_group_list:
      - type: 'dport_accept'
        dport: ['redis-server']
        saddr: '{{ redis_server_allow }}'
      - type: 'dport_accept'
        dport: ['redis-sentinel']
        saddr: '{{ redis_sentinel_allow }}'

galaxy_info:
  author: 'Nick Janetakis'
  description: 'Install and manage Redis cluster'
  company: 'DebOps'
  license: 'GNU General Public License v3'
  min_ansible_version: '1.7.0'
  platforms:
  - name: Ubuntu
    versions:
    - precise
    - quantal
    - raring
    - saucy
    - trusty
  - name: Debian
    versions:
    - wheezy
    - jessie
  categories:
  - 'database:nosql'
  - 'system'

meta_info:
  github_url: "https://github.com/debops/ansible-redis"
  git_branch: "master"
  galaxy_id: ""

  travis: False

  license_url: 'https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)'

  authors:
    - name:  'Nick Janetakis'
      url: ''
      email: ''
      twitter: 'nickjanetakis'
      github: 'nickjj'

    - name:  'Maciej Delmanowski'
      url: ''
      email: 'drybjed@gmail.com'
      twitter: 'drybjed'
      github: 'drybjed'

  synopsis: |
    `debops.redis` role allows you to easily setup infrastructure capable of
    running and managing 1 or more Redis servers. It is completely self healing
    with Redis Sentinel and supports replication seamlessly.

    Few features available in this role:
    
    - seamless master/slave replication;
    - throw together a master + n slaves + n sentinel setup in about 10 lines of YAML
      (most of those lines would be adding your hosts to the inventory);
    - your configs are idempotent, even when redis rewrites them;
    - pretty much every redis config value is tweakable;
    - you can easily use this role as a dependency in your other roles;

  usage: |
    Below is the bare minimum to get started to setup a few Redis servers
    acting together. If all you want to do is use Redis as a single server
    dependency in another role then include the role in your role's meta main
    file. You don't have to add the groups in your inventory in that case.
    
    ##### inventory/hosts
    
        # In this example the 'redis-server0' host would be the redis
        # master and everything else would be a slave of that master.
        [debops_redis]
        redis-server0
        redis-server1
        redis-server2
        
        # You can have 1 or more sentinels. The sentinel(s) will control your master
        # and slave relationships.
        [debops_redis_sentinel]
        redis-monitor
    
    ##### inventory/group_vars/debops_redis_sentinel.yml
    
        # It is expected that you have a firewall configured with 'debops.ferm'
        # role, set up to block all ports. Variables below tell Redis role to
        # accept connections from anywhere and then whitelist your local
        # network to allow connections to it.
        redis_sentinel_bind: ['0.0.0.0']
        redis_sentinel_allow: ['192.168.0.0/16']
    
    ##### inventory/group_vars/debops_redis.yml
    
        # This setup allows you to grant access to your redis servers from your
        # application group and the sentinel group. You can add as many hosts
        # as you need.
        redis_bind: ['0.0.0.0']
        redis_server_allow: '{{ groups["your_web_apps"] + redis_sentinel_hosts_group }}'
    
    If you want a Sentinel server to also act as a Redis server you can combine
    the 2 iservices on 1 host. You will need to set `redis_sentinel_standalone: False`
    in that host's inventory. This is covered in the `defaults/main.yml` file.
    
    You don't need to define a playbook unless you want to use group names other
    than the default. If you use non-default group names then make sure you
    change the defaults in your inventory.
    
    ##### Running the playbook
    
        ./site.sh -t redis
    

