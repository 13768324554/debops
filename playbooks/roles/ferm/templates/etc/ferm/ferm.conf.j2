# iptables ferm firewall
# {{ ansible_managed }}

# Default gateway interface to outside world
@def $DEV_WORLD = `ip route show | grep "default" | awk '{print $5}'`;

table filter {
	chain INPUT {
		mod comment comment "Generated by ferm (/etc/ferm/ferm.conf)" NOP;
		policy DROP;

		# Connection tracking
		mod conntrack ctstate INVALID DROP;
		mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;

		# Allow local connections
		interface lo ACCEPT;

		# Allow ICMP protocol
		protocol icmp ACCEPT;

{% if ferm_http_enable %}
		# Allow webserver connections
		protocol tcp dport (http https) ACCEPT;

{% endif %}
		# Allow monitoring connections
		#protocol tcp dport (munin nrpe) saddr (192.168.0.0/24 192.168.1.0/24) ACCEPT;

		# Allow SSH connections
		protocol tcp dport ssh {
{% if ansible_controller is defined and ansible_controller %}

			# Allow access for Ansible Controller (caution, might allow entire networks if it's a router)
			saddr {{ ansible_controller }} ACCEPT;
{% endif %}
{% if ferm_ssh_accept is defined %}

			# Bypass SSH filtering
{% for address in ferm_ssh_accept %}
			saddr {{ address }} ACCEPT;
{% endfor %}
{% endif %}

			# Allow no more than 8 ssh attempts from a source ip in 5 minutes
			@subchain "ssh-limit" {
				mod recent name SSH {
					set NOP;
					update seconds 300 hitcount 8 @subchain "ssh-log" {
						LOG log-prefix "Blocked-ssh: " log-level warning;
						DROP;
					}
				}
			}

			ACCEPT;
		}

		@include 'filter-input.d/';

		# Reject everything else
		protocol udp REJECT reject-with icmp-port-unreachable;
		protocol tcp REJECT reject-with tcp-reset;
		REJECT reject-with icmp-proto-unreachable;
	}

	chain OUTPUT {
		policy ACCEPT;

		# Connection tracking
		mod conntrack ctstate INVALID DROP;
		mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;
	}

	chain FORWARD {
		policy DROP;

		# Connection tracking
		mod conntrack ctstate INVALID DROP;
		mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;
{% if ansible_virtualization_type is defined and ansible_virtualization_type != 'lxc' or ferm_disable_forwarding is defined and ferm_disable_forwarding == True %}

		# Forward traffic to outside world
		outerface $DEV_WORLD ACCEPT;
{% if ansible_local is defined and ansible_local.interfaces.ports.internal is defined %}

		# Forward traffic to internal network
		outerface br1 ACCEPT;
{% endif %}
{% endif %}
	}
}

@include 'ferm.d/';


