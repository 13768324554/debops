#!/bin/bash

# {{ ansible_managed }}

# lxc: linux Container library

# Authors:
# Daniel Lezcano <daniel.lezcano@free.fr>
# Maciej Delmanowski <drybjed@gmail.com>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# ==============================================================
# This is a slightly modified version by Rob van der Hoeven
# I use it for my FreedomBox project: http://freedomboxblog.nl
# ==============================================================

configure_debian()
{
    rootfs=$1
    hostname=$2

    # Wheezy only has /dev/tty and /dev/tty0 by default,
    # therefore creating missing device nodes for tty1-4.
    for tty in $(seq 1 4); do
    if [ ! -e $rootfs/dev/tty$tty ]; then
       mknod $rootfs/dev/tty$tty c 4 $tty
    fi
    done

    # configure the inittab
    cat <<EOF > $rootfs/etc/inittab
id:3:initdefault:
si::sysinit:/etc/init.d/rcS
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin
1:2345:respawn:/sbin/getty 38400 console
c1:12345:respawn:/sbin/getty 38400 tty1 linux
c2:12345:respawn:/sbin/getty 38400 tty2 linux
c3:12345:respawn:/sbin/getty 38400 tty3 linux
c4:12345:respawn:/sbin/getty 38400 tty4 linux
EOF

    # configure fstab
    cat <<EOF > $rootfs/etc/fstab
# UNCONFIGURED FSTAB FOR BASE SYSTEM
EOF

    # configure /etc/hosts
    cat <<EOF > $rootfs/etc/hosts
127.0.0.1	localhost
::1		localhost ip6-localhost ip6-loopback
fe00::0		ip6-localnet
ff00::0		ip6-mcastprefix
ff02::1		ip6-allnodes
ff02::2		ip6-allrouters
EOF

    # disable selinux in debian
    mkdir -p $rootfs/selinux
    echo 0 > $rootfs/selinux/enforce

    # configure the network using dhcp
    cat <<EOF > $rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF

    # set the hostname
    cat <<EOF > $rootfs/etc/hostname
$hostname
EOF

    # let dhcp client report the hostname to dnsmasq
    cat <<EOF >> $rootfs/etc/dhcp/dhclient.conf
send host-name "$hostname";
send vendor-class-identifier "lxc.module";
EOF

    # reconfigure some services
    if [ -z "$LANG" ]; then
	chroot $rootfs locale-gen {{ lxc_locale }}
	chroot $rootfs update-locale LANG={{ lxc_locale }}
    else
	chroot $rootfs locale-gen $LANG
	chroot $rootfs update-locale LANG=$LANG
    fi

    # remove pointless services in a container
    chroot $rootfs /usr/sbin/update-rc.d -f umountfs remove
    chroot $rootfs /usr/sbin/update-rc.d -f hwclock.sh remove
    chroot $rootfs /usr/sbin/update-rc.d -f hwclockfirst.sh remove

    echo "root:{{ lxc_rootpw }}" | chroot $rootfs chpasswd
    echo "Root password is '{{ lxc_rootpw }}', please change !"

    # Force password change, container is in public IP space
    # FIXME: password shows up when logged in over ssh. Function disabled for now
    #chroot $rootfs passwd --expire root

    return 0
}

download_debian()
{
    rootfs=$1
    arch=$2

    echo "Downloading Debian Stable ..."
    multistrap --shortcut stable --dir $rootfs --arch $arch
    if [ $? -ne 0 ]; then
	echo "Failed to download the rootfs, aborting."
	return 1
    fi

    return 0
}

install_debian()
{
    rootfs=$1
    mkdir -p /var/lock/subsys/
    (
	flock -n -x 200
	if [ $? -ne 0 ]; then
	    echo "Cache repository is busy."
	    return 1
	fi

	arch=$(arch)
	if [ "$arch" == "x86_64" ]; then
	    arch=amd64
	fi

	if [ "$arch" == "i686" ]; then
	    arch=i386
	fi

	if [ "$arch" == "armv5tel" ]; then
	    arch=armel
	fi

	mkdir -p $rootfs/dev
	chmod 755 $rootfs/dev
	chown 0:0 $rootfs/dev
        mknod $rootfs/dev/random c 1 8
	chmod 666 $rootfs/dev/random
	chown 0:0 $rootfs/dev/random
	mknod $rootfs/dev/urandom c 1 9
	chmod 666 $rootfs/dev/urandom
	chown 0:0 $rootfs/dev/urandom
	mknod $rootfs/dev/null c 1 3
	chmod 666 $rootfs/dev/null
        download_debian $rootfs $arch
	cp -f /etc/locale.gen $rootfs/etc/locale.gen
        DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANGUAGE=C LANG=C chroot $rootfs dpkg --configure -a
	cp -f /etc/timezone $rootfs/etc/timezone
	chroot $rootfs dpkg-reconfigure -f noninteractive tzdata

	return 0

	) 200>/var/lock/subsys/lxc

    return $?
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    cat <<EOF >> $path/config

# Container
lxc.utsname = $name
lxc.rootfs = $rootfs
lxc.tty = 4
lxc.pts = 1024

# Capabilities
lxc.cap.drop	    = mac_admin
lxc.cap.drop	    = mac_override
lxc.cap.drop	    = sys_module
lxc.cap.drop	    = sys_admin

# Devices
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm

# Limits
#lxc.cgroup.cpu.shares                  = 1024
#lxc.cgroup.cpuset.cpus                 = 0
#lxc.cgroup.memory.limit_in_bytes       = 256M
#lxc.cgroup.memory.memsw.limit_in_bytes = 1G

# Mount points
lxc.mount.entry=proc $rootfs/proc proc ro,nodev,noexec,nosuid 0 0
lxc.mount.entry=sysfs $rootfs/sys sysfs ro  0 0

# Networking
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = {{ lxc_external_interface }}
lxc.network.ipv4 = 0.0.0.0/24
lxc.network.hwaddr = 00:1E:$(hex):$(hex):$(hex):$(hex)
EOF

    if [ $? -ne 0 ]; then
	echo "Failed to add configuration"
	return 1
    fi

    return 0
}

# nice trick from: http://mindref.blogspot.com/2011/01/debian-lxc-create.html
hex()
{
    echo "`tr -dc A-F0-9 < /dev/urandom | head -c 2 | xargs`"
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path>
EOF
    return 0
}

options=$(getopt -o hp:n:c -l help,path:,name: -- "$@")
if [ $? -ne 0 ]; then
        usage $(basename $0)
	exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
	-n|--name)      name=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

rootfs=$path/rootfs

install_debian $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install debian"
    exit 1
fi

configure_debian $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to configure debian for a container"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi

if [ ! -z $clean ]; then
    clean || exit 1
    exit 0
fi


