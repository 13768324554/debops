---

# ---- Manage /etc/hosts.allow ----

- name: Make sure /etc/hosts.allow.d directory exists
  file: path=/etc/hosts.allow.d state=directory owner=root group=root mode=0755

- name: Create /etc/hosts.allow.d/00_ansible
  template: src=etc/hosts.allow.d/00_ansible.j2 dest=/etc/hosts.allow.d/00_ansible
            owner=root group=root mode=0644

- name: Divert original /etc/hosts.allow
  command: dpkg-divert --quiet --local --divert {{ tcpwrappers_divert_hosts_allow }} --rename /etc/hosts.allow
           creates={{ tcpwrappers_divert_hosts_allow }}
  when: tcpwrappers is defined and tcpwrappers

- name: Allow access from Ansible Controller to sshd
  template: src=etc/hosts.allow.d/ansible_controller.j2 dest=/etc/hosts.allow.d/08_ansible_controller
            owner=root group=root mode=0644
  when: ansible_controller is defined and ansible_controller

- name: Remove hosts.allow entries if requested
  file: state=absent
        {% if item.filename is defined and item.filename %}
        path=/etc/hosts.allow.d/{{ item.weight | default('10') }}_{{ item.filename }}
        {% else %}
        path=/etc/hosts.allow.d/{{ item.weight | default('10') }}_{{ item.daemon }}_allow
        {% endif %}
  with_flattened:
    - tcpwrappers_allow
    - tcpwrappers_group_allow
    - tcpwrappers_host_allow
    - tcpwrappers_local_allow
  when: ((item.daemon is defined and item.daemon) and (item.client is undefined or (item.client is defined and not item.client))) or
        (item.custom is defined and not item.custom)

- name: Generate hosts.allow entries
  template: src=etc/hosts.allow.d/allow.j2 owner=root group=root mode=0644
            {% if item.filename is defined and item.filename %}
            dest=/etc/hosts.allow.d/{{ item.weight | default('10') }}_{{ item.filename }}
            {% else %}
            dest=/etc/hosts.allow.d/{{ item.weight | default('10') }}_{{ item.daemon }}_allow
            {% endif %}
  with_flattened:
    - tcpwrappers_allow
    - tcpwrappers_group_allow
    - tcpwrappers_host_allow
    - tcpwrappers_local_allow
  when: (item.daemon is defined and item.daemon and item.client is defined and item.client) or
        (item.custom is defined and item.custom)

- name: Assemble hosts.allow.d
  assemble: src=/etc/hosts.allow.d dest=/etc/hosts.allow backup=no owner=root group=root mode=0644
  when: tcpwrappers is defined and tcpwrappers

- name: Move current /etc/hosts.allow out of the way before reversion
  command: rm -f /etc/hosts.allow removes={{ tcpwrappers_divert_hosts_allow }}
  when: tcpwrappers is undefined or (tcpwrappers is defined and tcpwrappers == False)

- name: Remove diversion of /etc/hosts.allow
  command: dpkg-divert --quiet --local --rename --remove /etc/hosts.allow
           removes={{ tcpwrappers_divert_hosts_allow }}
  when: tcpwrappers is undefined or (tcpwrappers is defined and tcpwrappers == False)


# ---- Manage /etc/hosts.deny ----

- name: Deny access from everywhere if enabled
  lineinfile: "dest=/etc/hosts.deny regexp='^ALL: ALL' line='ALL: ALL' state=present"
  when: (tcpwrappers is defined and tcpwrappers) and
        (tcpwrappers_deny_all is defined and tcpwrappers_deny_all)

- name: Allow access from everywhere if disabled
  lineinfile: "dest=/etc/hosts.deny regexp='^ALL: ALL' state=absent"
  when: (tcpwrappers is defined and tcpwrappers) and
        (tcpwrappers_deny_all is undefined or (tcpwrappers_deny_all is defined and tcpwrappers_deny_all == False))


