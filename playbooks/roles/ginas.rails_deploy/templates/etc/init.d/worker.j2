#! /bin/bash

# {{ ansible_managed }}

# Heavily inspired by: https://github.com/gitlabhq/gitlabhq

### BEGIN INIT INFO
# Provides:          {{ rails_deploy_worker }}
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage a rails background worker process
# Description:       Manage a rails background worker process
### END INIT INFO

# ---------------------------------------------------------------------------
# configuration options
# ---------------------------------------------------------------------------
bundle="bundle"

app_user="{{ rails_deploy_service }}"
app_home="{{ rails_deploy_home }}"
app_src="{{ rails_deploy_src }}"
app_env_source="{{ rails_deploy_env_source }}"
app_run="{{ rails_deploy_run }}"
app_bin="{{ rails_deploy_src }}/bin/{{ rails_deploy_worker }}"

worker_service="{{ rails_deploy_worker }}"
worker_log="{{ rails_deploy_log }}/{{ rails_deploy_worker }}.log"
worker_pid="{{ rails_deploy_worker_pid }}"
worker_config_flag="-C $app_src/config/{{ rails_deploy_worker}}.yml"

# ---------------------------------------------------------------------------
# source the environment, ensure correct user, switch into the app's path
# ---------------------------------------------------------------------------
if ! $app_env_source ; then
 echo "failed to source environment for $worker_service, exiting"; exit 1;
fi

if [ "$USER" != "$app_user" ]; then
  eval su - "$app_user" -c $(echo \")$0 "$@"$(echo \"); exit;
fi

if ! cd "$app_src" ; then
 echo "failed to cd into $app_src, exiting"; exit 1;
fi

# ---------------------------------------------------------------------------
# private commands related to {{ rails_deploy_worker }}
# ---------------------------------------------------------------------------
server_start(){
  $bundle exec $app_bin $worker_config_flag -d -L $worker_log
}

server_stop(){
  $bundle exec bin/sidekiqctl stop $worker_pid
}

# ---------------------------------------------------------------------------
# get the pid from the file
# ---------------------------------------------------------------------------
check_pids(){
  if ! mkdir -p "$app_run"; then
    echo "could not create the path $app_run needed to store the pids"; exit 1
  fi
  if [ -f "$worker_pid" ]; then
    # read an existing pid file
    wpid=$(cat "$worker_pid")
  else
    wpid=0
  fi
}

# ---------------------------------------------------------------------------
# used after starting the worker service and are waiting for its pid
# ---------------------------------------------------------------------------
wait_for_pids(){
  # sleep for a bit to give it time
  i=0;
  while [ ! -f $worker_pid ]; do
    sleep 0.1;
    i=$((i+1))
    if [ $((i%10)) = 0 ]; then
      echo -n "."
    elif [ $((i)) = 301 ]; then
      echo "waited 30s for the process to write its pid, something went wrong, exiting"
      exit 1;
    fi
  done
  echo
}

# ---------------------------------------------------------------------------
# always check the pid
# ---------------------------------------------------------------------------
check_pids

# ---------------------------------------------------------------------------
# determine if the worker process is running or not
# ---------------------------------------------------------------------------
check_status(){
  check_pids

  # if the worker is running kill -0 $server_pid returns true, or rather 0
  # checks of *_status should only check for == 0 or != 0, never anything else
  if [ $wpid -ne "0" ]; then
    kill -0 "$wpid" 2>/dev/null
    worker_status="$?"
  else
    worker_status="-1"
  fi
  if [ $worker_status = 0 ]; then
    exit_status=0
  else
    # http://refspecs.linuxbase.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
    # code 3 means 'program is not running'
    exit_status=3
  fi
}

# ---------------------------------------------------------------------------
# check for stale pids and remove them if necessary
# ---------------------------------------------------------------------------
check_stale_pids(){
  check_status
  # if there is a pid it is something else than 0, the service is running if
  # *_status is == 0
  if [ "$wpid" != "0" -a "$worker_status" != "0" ]; then
    echo "removing stale $worker_service pid, this is most likely caused by $worker_service crashing the last time it ran"
    if ! rm "$worker_pid"; then
      echo "unable to remove stale pid, exiting"
      exit 1
    fi
  fi
}

# ---------------------------------------------------------------------------
# nothing is running so it is safe to exit
# ---------------------------------------------------------------------------
exit_if_not_running(){
  check_stale_pids
  if [ "$worker_status" != "0" ]; then
    echo "$worker_service is not running"
    exit
  fi
}

# ---------------------------------------------------------------------------
# start the worker process if it is not running
# ---------------------------------------------------------------------------
start_worker() {
  check_stale_pids

  if [ "$worker_status" != "0" ]; then
    echo -n "starting $worker_service"
  fi

  # then check if the service is running
  # if it is, don't start again
  if [ "$worker_status" = "0" ]; then
    echo "$worker_service is already running with pid $wpid, not restarting"
  else
    server_start
  fi

  # wait for the pids to be planted
  wait_for_pids

  # finally check the status to tell wether or not the app process is running
  print_status
}

# ---------------------------------------------------------------------------
# stop the worker process if it is running
# ---------------------------------------------------------------------------
stop_worker() {
  exit_if_not_running

  # if the worker process is running, stop it
  if [ "$worker_status" = "0" ]; then
    echo -n "shutting down $worker_service"
    server_stop
  fi

  # if something needs to be stopped, wait for it because using SIGKILL is bad in a script
  while [ "$worker_status" = "0" ]; do
    sleep 1
    check_status
    printf "."
    if [ "$worker_status" != "0" ]; then
      printf "\n"
      break
    fi
  done

  sleep 1

  # clean up the pid file
  rm "$worker_pid" 2>/dev/null

  print_status
}

# ---------------------------------------------------------------------------
# output the status of {{ rails_deploy_worker }}
# ---------------------------------------------------------------------------
print_status() {
  check_status
  if [ "$worker_status" != "0" ]; then
    echo "$worker_service is not running"
    return
  fi
  if [ "$worker_status" = "0" ]; then
      echo "$worker_service with pid $wpid is running"
  else
      printf "$worker_service is \033[31mnot running\033[0m\n"
  fi
  if [ "$worker_status" = "0" ]; then
    printf "$worker_service is \033[32mup and running\033[0m\n"
  fi
}

# ---------------------------------------------------------------------------
# restart the worker process by stopping it and then starting it
# ---------------------------------------------------------------------------
restart_worker(){
  check_status
  if [ "$worker_status" = "0" ]; then
    stop_worker
  fi
  start_worker
}

# ---------------------------------------------------------------------------
# handle the input
# ---------------------------------------------------------------------------
case "$1" in
  start)
        start_worker
        ;;
  stop)
        stop_worker
        ;;
  restart)
        restart_worker
        ;;
  status)
        print_status
        exit $exit_status
        ;;
  *)
        echo "Usage: service $worker_service {start|stop|restart|status}"
        exit 1
        ;;
esac

exit
