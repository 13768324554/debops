---

# This playbook can be used to bootstrap freshly installed minimal Debian
# system for Ansible management. The expected state the host:
#   - root account is configured with a known password;
#   - host has OpenSSH server installed and root can login with a password;
#   - default administrator account is not created;
#   - default administrator has no sudo access to root account;
#   - host is already configured in Ansible inventory/hosts file;
#   - local user has prepared SSH keypair in RSA format;
#
# Modifications that will be made on the host:
#   - playbook will install Python support with some essential software;
#   - a system 'admins' group will be created for users who have administrator
#     privileges (full sudo permissions);
#   - a normal user account named after your local user account will be
#     created and added to the 'admins' group;
#   - no passwords are set or modified on any account;
#   - if set, playbook will configure hostname and domain on the host using
#     'bootstrap_hostname' and 'bootstrap_domain' variables;
#
# Usage:
# debops bootstrap -k --limit host
#
# After securing access to the server by disabling the password authentication
# in sshd, this playbook is expected to not work correctly.


- name: Bootstrap host for Ansible management
  hosts: 'all:!localhost'
  remote_user: 'root'
  gather_facts: False
  sudo: False

  vars:
    bootstrap_admin_account: '{{ lookup("env","USER") }}'
    bootstrap_admin_group: 'admins'
    bootstrap_admin_ssh_key: '{{ lookup("pipe","ssh-add -L") }}'
    bootstrap_hostname: '{{ inventory_hostname_short | default(inventory_hostname) }}'

  tasks:
  - name: Install minimal Python support for Ansible
    raw: apt-get --no-install-recommends -yq install python python-apt

  - name: Gather host facts
    action: setup

  - name: Make sure essential software is installed
    apt:
      name: '{{ item }}'
      state: 'latest'
      install_recommends: False
    with_items: [ 'python', 'python-apt', 'sudo', 'lsb-release' ]

  - name: Create admin system group
    group:
      name: '{{ bootstrap_admin_group }}'
      state: 'present'
      system: True

  - name: Create administrator account
    user:
      name: '{{ bootstrap_admin_account }}'
      state: 'present'
      groups: '{{ bootstrap_admin_group }}'
      append: True

  - name: Install ssh public key from current account
    authorized_key:
      user: '{{ bootstrap_admin_account }}'
      key: '{{ bootstrap_admin_ssh_key }}'
      state: 'present'
    failed_when: (bootstrap_admin_ssh_key is undefined or
                  (bootstrap_admin_ssh_key is defined and not bootstrap_admin_ssh_key))

  - name: Configure admin group access in sudo
    lineinfile:
      dest: '/etc/sudoers.d/{{ bootstrap_admin_group }}'
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      state: 'present'
      create: True
      owner: 'root'
      group: 'root'
      mode: '0440'
    with_items:
      - regexp: '^Defaults:%{{ bootstrap_admin_group }} env_check\s'
        line:    'Defaults:%{{ bootstrap_admin_group }} env_check += "SSH_CLIENT"'
      - regexp: '^%{{ bootstrap_admin_group }}\s'
        line:    '%{{ bootstrap_admin_group }} ALL=(ALL:ALL) NOPASSWD: SETENV: ALL'

  - name: Ensure /etc/sudoers includes /etc/sudoers.d
    lineinfile:
      dest: '/etc/sudoers'
      regexp: '^#includedir\s+/etc/sudoers.d$'
      line: '#includedir /etc/sudoers.d'
      state: 'present'

  - name: Enforce new hostname
    hostname:
      name: '{{ bootstrap_hostname }}'
    when: bootstrap_hostname is defined and bootstrap_hostname

  - name: Save enforced hostname
    copy:
      content: '{{ bootstrap_hostname + "\n" }}'
      dest: '/etc/hostname'
      owner: 'root'
      group: 'root'
      mode: '0644'
    when: bootstrap_hostname is defined and bootstrap_hostname

  - name: Ensure domain is defined
    lineinfile:
      state: 'present'
      dest: '/etc/hosts'
      regexp: '{{ "^" + (bootstrap_ipv4 | default("127.0.1.1")) | replace(".","\.") }}'
      line: '{{ (bootstrap_ipv4 | default("127.0.1.1")) + "\t" + (bootstrap_hostname | default(ansible_hostname)) + "." + bootstrap_domain + "\t" + (bootstrap_hostname | default(ansible_hostname)) }}'
    when: bootstrap_domain is defined and bootstrap_domain

