---

dependencies:
  - role: debops.secret

  - role: debops.etc_services

  - role: debops.nodejs
    when: '"bundle exec rake assets:precompile" in rails_deploy_post_migrate_shell_commands'
    tags: nodejs

  - role: debops.ruby
    when: rails_deploy_dependencies is defined and
          'ruby' in rails_deploy_dependencies
    tags: ruby

  - role: debops.redis
    when: rails_deploy_worker_enabled and
          rails_deploy_dependencies is defined and
          'redis' in rails_deploy_dependencies
    tags: redis

  - role: debops.postgresql
    when: inventory_hostname == rails_deploy_hosts_master and
          (rails_deploy_dependencies is defined and
          'database' in rails_deploy_dependencies) and
          rails_deploy_database_adapter == 'postgresql'
    tags: postgresql

  - role: debops.mysql
    when: inventory_hostname == rails_deploy_hosts_master and
          (rails_deploy_dependencies is defined and
          'database' in rails_deploy_dependencies) and
          rails_deploy_database_adapter == 'mysql'
    tags: mysql

  - role: debops.nginx
    nginx_servers: [ '{{ rails_deploy_nginx_server }}' ]
    nginx_upstreams: [ '{{ rails_deploy_nginx_upstream }}' ]
    when: rails_deploy_dependencies is defined and
          'nginx' in rails_deploy_dependencies
    tags: nginx

  - role: debops.monit
    monit_process_host_list:
      - pid: '{{ rails_deploy_service }}/{{ rails_deploy_service }}.pid'
    when: rails_deploy_dependencies is defined and
          'monit' in rails_deploy_dependencies and
          not rails_deploy_worker_enabled
    tags: monit

  - role: debops.monit
    monit_process_host_list:
      - pid: '{{ rails_deploy_service }}/{{ rails_deploy_service }}.pid'
      - pid: '{{ rails_deploy_service }}/{{ rails_deploy_worker }}.pid'
    when: rails_deploy_dependencies is defined and
          'monit' in rails_deploy_dependencies and
          rails_deploy_worker_enabled
    tags: monit

galaxy_info:
  author: 'Nick Janetakis'
  description: 'Deploy and monitor rails applications'
  company: 'DebOps'
  license: 'GNU General Public License v3'
  min_ansible_version: '1.7.0'
  platforms:
  - name: Ubuntu
    versions:
    - precise
    - quantal
    - raring
    - saucy
    - trusty
  - name: Debian
    versions:
    - wheezy
    - jessie
  categories:
  - development
  - system

ansigenome_info:
  github_url: "https://github.com/debops/ansible-rails_deploy"
  git_branch: "master"
  galaxy_id: "1591"

  travis: True

  license_url: 'https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)'

  authors:
    - name:  'Nick Janetakis'
      url: ''
      email: 'nick.janetakis@gmail.com'
      twitter: 'nickjanetakis'
      github: 'nickjj'

  synopsis: |
    `debops.rails_deploy` role allows you to easily setup infrastructure
    capable of running Rails applications. It removes all of the headaches
    associated to setting up a secure Rails app that is ready for production so
    you can concentrate on developing your app.
    
    #### High level goals
    
    - Setup an entire rails app server with 1 line of configuration with sane defaults
    - Optionally and easily separate your app servers, database and worker into
      multiple servers
    - Quickly and easily switch between popular default databases and backend servers
    - Be as secure as possible and adhere to as many best practices as possible
    
    #### Backups and logging
    
    - Postgresql runs a daily backup with daily/weekly rotation
    - Both your backend server and background worker get logged to 1 logrotated file
    - The rails process gets sent to syslog.user
    
    #### System level minutia
    
    - User accounts, permissions and ssh keys are automatically managed
    - Paths such as logs, pids and sockets are automatically managed
    
    #### Deploy features
    
    - Automatically set deploy keys to github/gitlab with 1 line of configuration
      - This leverages their API, all you have to do is supply their token
    - Keep track of your schema file and config folder's mtime in local facts
      - This allows the deploy task to attempt to guess if your server needs a full restart or a quick reload
    - Only run database commands from a single master app server
      - This master is defined by simply being first in the group list
    - Various options to turn certain features on/off
      - A few examples would be database creation, migration and force restarting your server
    - Add custom services which get restarted/reloaded at the end of the deploy cycle
      - If you have a SOA setup this could be handy
    - Add and remove custom tasks at various points in the deploy
      - By default it is set to precompile assets and clear the /tmp cache
    - Optionally swap a static deploy page in/out during the deploy cycle
    
    #### Security
    
    - Secure passwords are managed automatically for your database
    - Ports are blocked and only whitelisted for IP addresses/masks that you specify
    - SSL is enabled by default but can be turned off if you really don't want it
    - Self signed SSL certs are automatically managed for you
      - Changing to properly signed certificates is a breeze

