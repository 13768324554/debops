---

dependencies:
  - role: debops.secret

  - role: debops.etc_services

  - role: debops.nodejs
    when: '"assets:precompile" in rails_deploy_post_migrate_shell_commands'
    tags: nodejs

  - role: debops.ruby
    when: rails_deploy_dependencies is defined and
          'ruby' in rails_deploy_dependencies
    tags: ruby

  - role: debops.redis
    when: rails_deploy_worker_enabled and
          rails_deploy_dependencies is defined and
          'redis' in rails_deploy_dependencies
    tags: redis

  - role: debops.postgresql
    when: inventory_hostname == rails_deploy_hosts_master and
          (rails_deploy_dependencies is defined and
          'database' in rails_deploy_dependencies) and
          rails_deploy_database_adapter == 'postgresql'
    tags: postgresql

  - role: debops.mysql
    when: inventory_hostname == rails_deploy_hosts_master and
          (rails_deploy_dependencies is defined and
          'database' in rails_deploy_dependencies) and
          rails_deploy_database_adapter == 'mysql'
    tags: mysql

  - role: debops.nginx
    nginx_servers: [ '{{ rails_deploy_nginx_server }}' ]
    nginx_upstreams: [ '{{ rails_deploy_nginx_upstream }}' ]
    when: rails_deploy_dependencies is defined and
          'nginx' in rails_deploy_dependencies
    tags: nginx

  - role: debops.monit
    monit_process_host_list:
      - pid: '{{ rails_deploy_service }}/{{ rails_deploy_service }}.pid'
    when: rails_deploy_dependencies is defined and
          'monit' in rails_deploy_dependencies and
          not rails_deploy_worker_enabled
    tags: monit

  - role: debops.monit
    monit_process_host_list:
      - pid: '{{ rails_deploy_service }}/{{ rails_deploy_service }}.pid'
      - pid: '{{ rails_deploy_service }}/{{ rails_deploy_worker }}.pid'
    when: rails_deploy_dependencies is defined and
          'monit' in rails_deploy_dependencies and
          rails_deploy_worker_enabled
    tags: monit

galaxy_info:
  author: 'Nick Janetakis'
  description: 'Deploy and monitor rails applications'
  company: 'DebOps'
  license: 'GNU General Public License v3'
  min_ansible_version: '1.7.0'
  platforms:
  - name: Ubuntu
    versions:
    - precise
    - quantal
    - raring
    - saucy
    - trusty
  - name: Debian
    versions:
    - wheezy
    - jessie
  categories:
  - development
  - system

ansigenome_info:
  github_url: "https://github.com/debops/ansible-rails_deploy"
  git_branch: "master"
  galaxy_id: "1591"

  travis: True

  license_url: 'https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)'

  authors:
    - name:  'Nick Janetakis'
      url: ''
      email: 'nick.janetakis@gmail.com'
      twitter: 'nickjanetakis'
      github: 'nickjj'

  synopsis: |
    ``debops.rails_deploy`` role allows you to easily setup infrastructure
    capable of running Rails applications. It removes all of the headaches
    associated to setting up a secure Rails app that is ready for production so
    you can concentrate on developing your app.
    
    A few features supplied by this role
    ====================================
    
    High level goals
    ^^^^^^^^^^^^^^^^
    
    - Setup an entire rails app server with 1 line of configuration with sane defaults
    - Optionally and easily separate your app servers, database and worker into
      multiple servers
    - Quickly and easily switch between popular default databases and backend servers
    - Be as secure as possible and adhere to as many best practices as possible
    
    Backups and logging
    ^^^^^^^^^^^^^^^^^^^
    
    - Postgresql runs a daily backup with daily/weekly rotation
    - Both your backend server and background worker get logged to 1 logrotated file
    - The rails process gets sent to syslog.user
    
    System level minutia
    ^^^^^^^^^^^^^^^^^^^^
    
    - User accounts, permissions and ssh keys are automatically managed
    - Paths such as logs, pids and sockets are automatically managed
    
    Deploy features
    ^^^^^^^^^^^^^^^
    
    - Automatically set deploy keys to github/gitlab with 1 line of configuration
      - This leverages their API, all you have to do is supply their token
    - Keep track of your schema file and config folder's mtime in local facts
      - This allows the deploy task to attempt to guess if your server needs a full restart or a quick reload
    - Only run database commands from a single master app server
      - This master is defined by simply being first in the group list
    - Various options to turn certain features on/off
      - A few examples would be database creation, migration and force restarting your server
    - Add custom services which get restarted/reloaded at the end of the deploy cycle
      - If you have a SOA setup this could be handy
    - Add and remove custom tasks at various points in the deploy
      - By default it is set to precompile assets and clear the /tmp cache
    - Optionally swap a static deploy page in/out during the deploy cycle
    
    Security
    ^^^^^^^^
    
    - Secure passwords are managed automatically for your database
    - Ports are blocked and only whitelisted for IP addresses/masks that you specify
    - SSL is enabled by default but can be turned off if you really don't want it
    - Self signed SSL certs are automatically managed for you
      - Changing to properly signed certificates is a breeze

  usage: |
    Below is the bare minimum to get started.
    
    hosts
    =====
    
    ::
    
        [debops_rails]
        somehost
    
    inventory/host_vars/somehost.yml
    ================================
    
    ::
    
        ---
    
        rails_deploy_git_location: 'git@github.com:youraccount/yourappname.git'
    
    The idea is that you'll push your code somewhere and then the role will
    pull in from that repo.
    
    playbook
    ========
    
    ::
    
        ---
    
        # playbooks/custom.yml
    
        - name: Deploy yourappname
          hosts: debops_rails
          sudo: true
    
          roles:
            - { role: debops.rails_deploy, tags: yourappname }
    
    Running the playbook with DebOps
    ================================
    
    ::
    
        debops -t yourappname
    
    Running the playbook without DebOps
    ===================================
    
    ::
    
        ansible-playbook playbooks/custom.yml -i /path/to/your/inventory -t yourappname
    
    Changes you need to make in your rails application
    ==================================================
    
    Gemfile
    ^^^^^^^
    
    You must have unicorn **or** puma added.
    
    ::
    
        # Pick one, you may also want to bump the version to the most recent version
        # These are the most recent as of ~August 2014
        gem 'unicorn', '~> 4.8.3'
        gem 'puma', '~> 2.9.0'
    
    You must have pg **or** mysql2 added.
    
    ::
    
        # Pick one, you may also want to bump the version to the most recent version
        # These are the most recent as of ~August 2014
        gem 'pg', '~> 0.17.1'
        gem 'mysql2', '~> 0.3.16'
    
    Backend server config
    ^^^^^^^^^^^^^^^^^^^^^
    
    You should base your unicorn or puma config off our `example configs`_
    because certain environment variables are required to exist. Also certain
    signals are sent to reload or restart the backend which require certain
    configuration options to be set. Luckily you don't have to think about any
    of that, just use the pre-written configs in your app.
    
    .. _example configs: https://github.com/debops/ansible-rails_deploy/tree/master/docs/examples/rails/config
    
    Background worker config
    ^^^^^^^^^^^^^^^^^^^^^^^^
    
    You should also base your sidekiq configs off our `example configs`_.
    Similar to the backend server it expects certain environment variables to
    exist.
    
    Database config
    ^^^^^^^^^^^^^^^
    
    The database configuration below would be reasonable to use. The only
    requirement is that yours must use the ``DATABASE_URL`` format in whatever
    environments you plan to deploy to. That simply means that those
    environments should be removed from your database config file. This role
    sets up the ``DATABASE_URL`` for you.
    
    ::
    
        ---
        development:
          url: <%= ENV['DATABASE_URL'].gsub('?', '_development?') %>
        test:
          url: <%= ENV['DATABASE_URL'].gsub('?', '_test?') %>
    
    Application config
    ^^^^^^^^^^^^^^^^^^
    
    In order to log everything to 1 file you must drop this line into your
    application config. This would apply to all environments. Feel free to move
    this to only staging and/or production if you don't want this to happen in
    development.
    
    ::
    
        config.paths['log'] = ENV['LOG_FILE']
    
    Production environment config
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    Chances are you'll want your rails app to write to syslog in production or
    on your staging/build/etc. server. Copy this into your production
    environment config.
    
    ::
    
        require 'syslog/logger'
    
        # ...
    
        # The tags are optional but it's useful to have.
        config.log_tags = [ :subdomain, :uuid ]
    
        # This allows you to write to syslog::user without any additional gems/config.
        config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new('yourappname'))
    
    Public files
    ^^^^^^^^^^^^
    
    You will likely want the following files to exist in your ``/public``
    directory:
    
    - 404, 422, 500 and 502 html files to process error pages
    - deploy html file to swap in/out during the deploy process
    
    The above will allow nginx to serve those files directly before rails even
    gets a chance.
    
    Don't feel like making these small changes every time you make a new app?
    =========================================================================
    
    Me neither. That's why I created `orats`_. It is a command line tool that
    generates a shiny new rails application with an accumulation of best
    practices that I have picked up over time. It is also a little opinionated.
    Check out `orats`_ git repo if you're interested.
    
    .. _orats: https://github.com/nickjj/orats/
    
    
    FAQ / troubleshooting guide
    ===========================
    
    You switched from unicorn to puma or puma to unicorn and the site is dead
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    Chances are you're deploying with tags so the entire role did not run. When
    you switch servers nginx needs to be restarted. Make sure you ``-t nginx`` or
    just run the whole role when you change servers.
    
    You can't clone your repo
    ^^^^^^^^^^^^^^^^^^^^^^^^^
    
    Since the role needs to pull in from your git repo then it needs permission
    to your repo. The most common way to do that is to setup an API access
    token for GitHub.
    
    GitLab is also supported, all of this is documented in the default variables
    file.
    
    How would you go about setting up a CI platform with this role?
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    Rather than impose a CI solution on you, you're free to do whatever you want.
    
    A possible situation might be to use this role to deploy to
    a staging/CI/build server instead of directly to production. Now your build
    server can run tests and push to production using this role on different
    hosts if everything goes well.
    
    That would allow you to have a sweet CI setup where your developers only
    have to git push somewhere and minutes later you have tested code in
    production if you don't have to worry about a ton of red tape.
    
    I'm using unicorn and after restarting it's dead (502)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    You need to have something like monit handle keeping the service up. Are you
    sure you have monit in the ``rails_deploy_dependencies`` list?

