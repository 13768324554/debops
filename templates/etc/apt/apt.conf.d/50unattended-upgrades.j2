// {{ ansible_managed }}

// Unattended-Upgrade::Origins-Pattern controls which packages are
// upgraded.
{#//
// Lines below have the format format is "keyword=value,...".  A
// package will be upgraded only if the values in its metadata match
// all the supplied keywords in a line.  (In other words, omitted
// keywords are wild cards.) The keywords originate from the Release
// file, but several aliases are accepted.  The accepted keywords are:
//   a,archive,suite (eg, "stable")
//   c,component     (eg, "main", "crontrib", "non-free")
//   l,label         (eg, "Debian", "Debian-Security")
//   o,origin        (eg, "Debian", "Unofficial Multimedia Packages")
//   n,codename      (eg, "jessie", "jessie-updates")
//     site          (eg, "http.debian.net")
// The available values on the system are printed by the command
// "apt-cache policy", and can be debugged by running
// "unattended-upgrades -d" and looking at the log file.
//
// Within lines unattended-upgrades allows 2 macros whose values are
// derived from /etc/debian_version:
//   ${distro_id}            Installed origin.
//   ${distro_codename}      Installed codename (eg, "jessie")
//
// Codename based matching:
// This will follow the migration of a release through different
// archives (e.g. from testing to stable and later oldstable).
//      "o=Debian,n=jessie";
//      "o=Debian,n=jessie-updates";
//      "o=Debian,n=jessie-proposed-updates";
//      "o=Debian,n=jessie,l=Debian-Security";
//
// Archive or Suite based matching:
// Note that this will silently match a different release after
// migration to the specified archive (e.g. testing becomes the
// new stable).
//      "o=Debian,a=stable";
//      "o=Debian,a=stable-updates";
//      "o=Debian,a=proposed-updates";
//      "origin=Debian,codename=${distro_codename},label=Debian-Security";#}
Unattended-Upgrade::Origins-Pattern {
{% set unattended_upgrades_tpl_origins = [] %}
{% for item in unattended_upgrades_security_origins[unattended_upgrades_security_lookup] %}
{%   set _ = unattended_upgrades_tpl_origins.append(item) %}
{% endfor %}
{% if unattended_upgrades_release | bool %}
{%   for item in unattended_upgrades_release_origins %}
{%   set _ = unattended_upgrades_tpl_origins.append(item) %}
{%   endfor %}
{% endif %}
{% for item in (unattended_upgrades_origins + unattended_upgrades_dependent_origins) %}
{%   set _ = unattended_upgrades_tpl_origins.append(item) %}
{% endfor %}
{% if (ansible_local|d() and ansible_local.unattended_upgrades|d() and
       ansible_local.unattended_upgrades.origins|d()) %}
{%   for item in ansible_local.unattended_upgrades.origins %}
{%     set _ = unattended_upgrades_tpl_origins.append(item) %}
{%   endfor %}
{% endif %}
{% for item in unattended_upgrades_tpl_origins | sort | unique %}
        "{{ item }}";
{% endfor %}
};

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
{% set unattended_upgrades_tpl_blacklist = [] %}
{% for item in (unattended_upgrades_default_blacklist +
                unattended_upgrades_blacklist +
                unattended_upgrades_group_blacklist +
                unattended_upgrades_dependent_blacklist) %}
{%   set _ = unattended_upgrades_tpl_blacklist.append(item) %}
{% endfor %}
{% if (ansible_local|d() and ansible_local.unattended_upgrades|d() and
       ansible_local.unattended_upgrades.blacklist|d()) %}
{%   for item in ansible_local.unattended_upgrades.blacklist %}
{%     set _ = unattended_upgrades_tpl_blacklist.append(item) %}
{%   endfor %}
{% endif %}
{% for item in unattended_upgrades_tpl_blacklist | sort | unique %}
        "{{ item }}";
{% endfor %}
};

// This option allows you to control if on a unclean dpkg exit
// unattended-upgrades will automatically run
//   dpkg --force-confold --configure -a
// The default is true, to ensure updates keep getting installed
Unattended-Upgrade::AutoFixInterruptedDpkg "{{ unattended_upgrades_auto_fix_interrupted_dpkg | bool | lower }}";

// By default unattended-upgrade script performs upgrades of all packages, even
// if they require a service restart. Set this parameter to "false" to not
// perform automatic upgrades of such services.
Unattended-Upgrade::IgnoreAppsRequireRestart "{{ unattended_upgrades_ignore_app_require_restart | bool | lower }}";

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGUSR1. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
Unattended-Upgrade::MinimalSteps "{{ unattended_upgrades_minimal_steps | bool | lower }}";

// Install all unattended-upgrades when the machine is shuting down
// instead of doing it in the background while the machine is running
// This will (obviously) make shutdown slower
Unattended-Upgrade::InstallOnShutdown "{{ unattended_upgrades_install_on_shutdown | bool | lower }}";

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"
Unattended-Upgrade::Mail "{{ unattended_upgrades_mail_to | join(',') }}";

// Set this value to "true" to get emails only on errors. Default
// is to always send a mail if Unattended-Upgrade::Mail is set
Unattended-Upgrade::MailOnlyOnError "{{ unattended_upgrades_mail_only_on_error | bool | lower }}";

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
Unattended-Upgrade::Remove-Unused-Dependencies "{{ unattended_upgrades_remove_unused | bool | lower }}";

// Automatically reboot *WITHOUT CONFIRMATION* if
//  the file /var/run/reboot-required is found after the upgrade
Unattended-Upgrade::Automatic-Reboot "{{ unattended_upgrades_auto_reboot | bool | lower }}";

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
//  Example: "02:00"
Unattended-Upgrade::Automatic-Reboot-Time "{{ unattended_upgrades_auto_reboot_time }}";

// Use apt bandwidth limit feature, this example limits the download
// speed to 70kb/sec
{% if unattended_upgrades_bandwidth_limit %}
Acquire::http::Dl-Limit "{{ unattended_upgrades_bandwidth_limit }}";
{% else %}
//Acquire::http::Dl-Limit "70";
{% endif %}

// vim:ft=aptconf
