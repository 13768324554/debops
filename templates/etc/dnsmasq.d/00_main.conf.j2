# {{ ansible_managed }}

# ---- General options ----

{% if (dnsmasq_ipv4_gateway|d() and
       hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway]|d() and
       hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway].ipv4|d() and
       hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway].ipv4.address | ipaddr('public')) %}
{%   if dnsmasq_bogus_priv|bool %}
# Don't forward private IP address queries to external networks.
bogus-priv
{%   endif %}
{% endif %}

# Enable connection tracking support.
conntrack

{% if dnsmasq_router|bool %}
# Enable IPv6 Router Advertisements.
enable-ra
{% endif %}

{% if dnsmasq_tftp_ipxe|bool %}
# Enable chain-loading of iPXE boot loader.
dhcp-match = set:ipxe,175
dhcp-boot = tag:!ipxe,undionly.kpxe
dhcp-boot = {{ dnsmasq_tftp_boot | d('menu.ipxe') }}
{% endif %}

# ---- Network interfaces ----

{% if dnsmasq_bind_interfaces|bool %}
# Bind only to specified interfaces (this will be set for example by libvirt
# package, so we need to just go with it).
{%   if ansible_distribution_release in [ 'wheezy' ] %}
bind-interfaces
{%   else %}
bind-dynamic
{%   endif %}
{% endif %}

# Bind to loopback interface for local DNS queries.
interface = lo
no-dhcp-interface = lo

{% if dnsmasq_public_dns|bool %}
{%   if (dnsmasq_ipv4_gateway|d() and
       hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway].ipv4|d()) %}
# Bind to local IPv4 gateway for remote DNS queries.
interface = {{ dnsmasq_ipv4_gateway }}
no-dhcp-interface = {{ dnsmasq_ipv4_gateway }}
{%   endif %}
{%   if (dnsmasq_ipv6_gateway|d() and
         dnsmasq_ipv6_gateway != dnsmasq_ipv4_gateway and
         hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv6_gateway].ipv6|d()) %}
# Bind to local IPv6 gateway for remote DNS queries.
interface = {{ dnsmasq_ipv6_gateway }}
no-dhcp-interface = {{ dnsmasq_ipv6_gateway }}
{%   endif %}
{% endif %}

{% if dnsmasq_upstream_interfaces|d() %}
{%   for interface in dnsmasq_upstream_interfaces %}
{%     if ((dnsmasq_ipv4_gateway is defined and interface != dnsmasq_ipv4_gateway) and
           (dnsmasq_ipv6_gateway is defined and interface != dnsmasq_ipv6_gateway) and
           hostvars[inventory_hostname]["ansible_" + interface]|d() and
           ((hostvars[inventory_hostname]["ansible_" + interface].ipv4|d() or
            (hostvars[inventory_hostname]["ansible_" + interface].ipv6|d())))) %}
# Don't respond to DHCP or TFTP queries on this interface.
interface = {{ interface }}
no-dhcp-interface = {{ interface }}
{%     endif %}
{%   endfor %}
{% endif %}

# ---- DNS options ----

{% if dnsmasq_etc_hosts|d() %}
# Use alternative `/etc/hosts` file.
no-hosts
addn-hosts = {{ dnsmasq_etc_hosts }}
{% endif %}

# Return answers for DNS queries depending on the originating network interface.
localise-queries

# Don't forward hostname queries to remote DNS servers.
domain-needed

# Add domain to hostnames in hosts file.
expand-hosts

{% if dnsmasq_stop_dns_rebind|bool %}
# Reject private IP addresses from upstream nameservers
stop-dns-rebind
{% endif %}

# Allow rebinding of localhost IP address (for RBL support).
rebind-localhost-ok

{% if (dnsmasq_ipv4_gateway|d() and
       hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway]|d() and
       hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway].ipv4|d() and
       (not hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway].ipv4.address | ipaddr('public'))) %}
# Allow rebinding of private IP addresses on server domain (for other servers
# behind local NAT).
rebind-domain-ok = {{ ansible_domain }}
{% endif %}

# Domain used by the DHCP server.
domain = {{ dnsmasq_domain }}

# Domain managed by the dnsmasq DNS server.
local = /{{ dnsmasq_domain }}/

{% if dnsmasq_domain_mx|d() %}
# Point mails on main domain to a specific host.
mx-host = {{ dnsmasq_domain }},{{ dnsmasq_domain_mx }},10

# Each host by default maintains its own mail.
selfmx
{% endif %}

{% set dnsmasq_tpl_local_record = [] %}
{% if hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway]|d() and
      hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway].ipv4|d() %}
{%   set dnsmasq_tpl_local_record = dnsmasq_tpl_local_record + [ hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv4_gateway].ipv4.address ] %}
{% endif %}
{% if hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv6_gateway]|d() and
      hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv6_gateway].ipv6|d() %}
{%   for element in hostvars[inventory_hostname]["ansible_" + dnsmasq_ipv6_gateway].ipv6 | map(attribute='address') | list %}
{%     if not element | ipv6('link-local') %}
{%       set _ = dnsmasq_tpl_local_record.append(element) %}
{%     endif %}
{%   endfor %}
{% endif %}
{% if dnsmasq_tpl_local_record %}
# DNS records of local server.
{% for element in dnsmasq_tpl_local_record %}
host-record = {{ ansible_fqdn }},{{ ansible_hostname }},{{ element }}
{% endfor %}
{% endif %}

{% if dnsmasq_cname is defined and dnsmasq_cname %}
# CNAME records.
{%   for host, list in dnsmasq_cname.iteritems() %}
{%     if list is string %}
cname = {{ list + '.' + dnsmasq_domain }},{{ host + '.' + dnsmasq_domain }}
{%     else %}
{%       for element in list %}
cname = {{ element + '.' + dnsmasq_domain }},{{ host + '.' + dnsmasq_domain }}
{%       endfor %}
{%     endif %}
{%   endfor %}
{% endif %}

{% if dnsmasq_nameservers|d() %}
# Use the nameservers in this file instead of the system upstream nameservers.
resolv-file = /etc/resolvconf/upstream.conf
{% endif %}

{% if dnsmasq__dns_not_forward_reserved|d() %}
{{ dnsmasq__dns_not_forward_reserved }}
{% endif %}

{% if dnsmasq__dns_not_forward_private|d() %}
{{ dnsmasq__dns_not_forward_private }}
{% endif %}

{% if dnsmasq_options|d() %}
# ---- Global custom options ----

{{ dnsmasq_options }}
{% endif %}

{% if dnsmasq__group_options|d() %}
# ---- Group custom options ----

{{ dnsmasq__group_options }}
{% endif %}

{% if dnsmasq__host_options|d() %}
# ---- Host custom options ----

{{ dnsmasq__host_options }}
{% endif %}
