# {{ ansible_managed }}

{% macro print_rule(config) %}
{#   Domain, table, chain #}
{#   ==================== #}
{%   set ferm__tpl_domain = [] %}
{%   set ferm__tpl_table = [] %}
{%   set ferm__tpl_chain = [] %}
{%   if config.domain|d() %}
{%     set _ = ferm__tpl_domain.extend(([ config.domain ] if config.domain is string else config.domain)) %}
{%   elif config.domains|d() %}
{%     set _ = ferm__tpl_domain.extend(([ config.domains ] if config.domains is string else config.domains)) %}
{%   endif %}
{%   if config.table|d() %}
{%     set _ = ferm__tpl_table.extend(([ config.table ] if config.table is string else config.table)) %}
{%   elif config.tables|d() %}
{%     set _ = ferm__tpl_table.extend(([ config.tables ] if config.tables is string else config.tables)) %}
{%   endif %}
{%   if config.chain|d() %}
{%     set _ = ferm__tpl_chain.extend(([ config.chain ] if config.chain is string else config.chain)) %}
{%   elif config.chains|d() %}
{%     set _ = ferm__tpl_chain.extend(([ config.chains ] if config.chains is string else config.chains)) %}
{%   endif %}
{%   if not ferm__tpl_domain %}
{%     set ferm__tpl_domain = ferm__domains %}
{%   endif %}
{%   if not ferm__tpl_table %}
{%     set ferm__tpl_table = [ 'filter' ] %}
{%   endif %}
{%   if not ferm__tpl_chain %}
{%     set ferm__tpl_chain = [ 'INPUT' ] %}
{%   endif %}
{%   set ferm__tpl_domain_args = [] %}
{%   if ferm__tpl_domain %}
{%     if ferm__tpl_domain | length == 1 %}
{%       set _ = ferm__tpl_domain_args.append("domain " +  ferm__tpl_domain | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_domain_args.append("domain (" + ferm__tpl_domain | join(" ") + ")") %}
{%     endif %}
{%   endif %}
{%   if ferm__tpl_table %}
{%     if ferm__tpl_table | length == 1 %}
{%       set _ = ferm__tpl_domain_args.append("table " +  ferm__tpl_table | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_domain_args.append("table (" + ferm__tpl_table | join(" ") + ")") %}
{%     endif %}
{%   endif %}
{%   if ferm__tpl_chain %}
{%     if ferm__tpl_chain | length == 1 %}
{%       set _ = ferm__tpl_domain_args.append("chain " +  ferm__tpl_chain | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_domain_args.append("chain (" + ferm__tpl_chain | join(" ") + ")") %}
{%     endif %}
{%   endif %}
{#   Rule arguments #}
{#   ============== #}
{%   set ferm__tpl_target = 'ACCEPT' %}
{%   set ferm__tpl_hashlimit_target = 'RETURN' %}
{%   set ferm__tpl_recent_target = 'NOP' %}
{%   set ferm__tpl_reject_with = 'icmp-admin-prohibited' %}
{%   set ferm__tpl_interface = [] %}
{%   set ferm__tpl_interface_present = [] %}
{%   set ferm__tpl_outerface = [] %}
{%   set ferm__tpl_outerface_present = [] %}
{%   set ferm__tpl_protocol = [] %}
{%   set ferm__tpl_protocol_syn = [] %}
{%   set ferm__tpl_saddr = [] %}
{%   set ferm__tpl_daddr = [] %}
{%   set ferm__tpl_sport = [] %}
{%   set ferm__tpl_dport = [] %}
{%   set ferm__tpl_state = [] %}
{%   set ferm__tpl_tracking_invalid_target = (config.tracking_invalid_target | d('DROP')) %}
{%   set ferm__tpl_tracking_active_target = (config.tracking_active_target | d('ACCEPT')) %}
{%   set ferm__tpl_tracking_module = (config.tracking_module | d('conntrack')) %}
{%   set ferm__tpl_recent_name = '' %}
{%   set ferm__tpl_recent_set_name = '' %}
{%   set ferm__tpl_recent_update = False %}
{%   set ferm__tpl_recent_remove = False %}
{%   set ferm__tpl_recent_seconds = '' %}
{%   set ferm__tpl_recent_hitcount = '' %}
{%   if config.recent_name|d() %}
{%     set ferm__tpl_recent_name = config.recent_name %}
{%   elif config.recent_set_name|d() %}
{%     set ferm__tpl_recent_set_name = config.recent_set_name %}
{%   endif %}
{%   if config.recent_update|d() and config.recent_update | bool %}
{%     set ferm__tpl_recent_update = True %}
{%   endif %}
{%   if config.recent_remove|d() and config.recent_remove | bool %}
{%     set ferm__tpl_recent_remove = True %}
{%   endif %}
{%   if config.recent_seconds|d() %}
{%     set ferm__tpl_recent_seconds = config.recent_seconds | string %}
{%   endif %}
{%   if config.recent_hitcount|d() %}
{%     set ferm__tpl_recent_hitcount = config.recent_hitcount | string %}
{%   endif %}
{%   if config.recent_target|d() %}
{%     set ferm__tpl_recent_target = config.recent_target %}
{%   endif %}
{%   set ferm__tpl_subchain = (config.type|d('accept') + "-" + config.name | d((config.dport[0] if config.dport|d() else "rules"))) %}
{%   if config.interface|d() %}
{%     set _ = ferm__tpl_interface.extend(([ config.interface ] if config.interface is string else config.interface)) %}
{%   elif config.interfaces|d() %}
{%     set _ = ferm__tpl_interface.extend(([ config.interfaces ] if config.interfaces is string else config.interfaces)) %}
{%   endif %}
{%   if ferm__tpl_tracking_module == 'state' %}
{%     set ferm__tpl_tracking_module_command = 'mod state state' %}
{%   else %}
{%     set ferm__tpl_tracking_module_command = 'mod conntrack ctstate' %}
{%   endif %}
{%   if config.interface_present|d() %}
{%     if config.interface_present is string %}
{%       if hostvars[inventory_hostname]["ansible_" + config.interface_present]|d() %}
{%         set ferm__tpl_interface_present = [ config.interface_present ] %}
{%       endif %}
{%     else %}
{%       for interface in config.interface_present %}
{%         if hostvars[inventory_hostname]["ansible_" + interface]|d() %}
{%           set _ = ferm__tpl_interface_present.append(interface) %}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   elif config.interfaces_present|d() %}
{%     if config.interfaces_present is string %}
{%       if hostvars[inventory_hostname]["ansible_" + config.interfaces_present]|d() %}
{%         set ferm__tpl_interface_present = [ config.interfaces_present ] %}
{%       endif %}
{%     else %}
{%       for interface in config.interfaces_present %}
{%         if hostvars[inventory_hostname]["ansible_" + interface]|d() %}
{%           set _ = ferm__tpl_interface_present.append(interface) %}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endif %}
{%   if config.outerface|d() %}
{%     set _ = ferm__tpl_outerface.extend(([ config.outerface ] if config.outerface is string else config.outerface)) %}
{%   elif config.outerfaces|d() %}
{%     set _ = ferm__tpl_outerface.extend(([ config.outerfaces ] if config.outerfaces is string else config.outerfaces)) %}
{%   endif %}
{%   if config.outerface_present|d() %}
{%     if config.outerface_present is string %}
{%       if hostvars[inventory_hostname]["ansible_" + config.outerface_present]|d() %}
{%         set ferm__tpl_outerface_present = [ config.outerface_present ] %}
{%       endif %}
{%     else %}
{%       for outerface in config.outerface_present %}
{%         if hostvars[inventory_hostname]["ansible_" + outerface]|d() %}
{%           set _ = ferm__tpl_outerface_present.append(outerface) %}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   elif config.outerfaces_present|d() %}
{%     if config.outerfaces_present is string %}
{%       if hostvars[inventory_hostname]["ansible_" + config.outerfaces_present]|d() %}
{%         set ferm__tpl_outerface_present = [ config.outerfaces_present ] %}
{%       endif %}
{%     else %}
{%       for outerface in config.outerfaces_present %}
{%         if hostvars[inventory_hostname]["ansible_" + outerface]|d() %}
{%           set _ = ferm__tpl_outerface_present.append(outerface) %}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endif %}
{%   if config.protocol|d() %}
{%     set _ = ferm__tpl_protocol.extend(([ config.protocol ] if config.protocol is string else config.protocol)) %}
{%   elif config.protocols|d() %}
{%     set _ = ferm__tpl_protocol.extend(([ config.protocols ] if config.protocols is string else config.protocols)) %}
{%   endif %}
{%   if config.protocol_syn is defined %}
{%     if config.protocol_syn | bool %}
{%       set ferm__tpl_protocol_syn = [ 'syn' ] %}
{%     elif not config.protocol_syn | bool %}
{%       set ferm__tpl_protocol_syn = [ '! syn' ] %}
{%     endif %}
{%   endif %}
{%   if config.saddr|d() %}
{%     set _ = ferm__tpl_saddr.extend(([ config.saddr ] if config.saddr is string else config.saddr)) %}
{%   endif %}
{%   if config.type|d('accept') == 'ansible_controller' %}
{%     set ferm__tpl_ansible_controllers = [] %}
{%     if ansible_local|d() and ansible_local.core|d() and ansible_local.core.ansible_controllers|d() %}
{%       set _ = ferm__tpl_ansible_controllers.extend(ansible_local.core.ansible_controllers) %}
{%     endif %}
{%     if ansible_local|d() and ansible_local.ferm|d() and ansible_local.ferm.ansible_controllers|d() %}
{%       set _ = ferm__tpl_ansible_controllers.extend(ansible_local.ferm.ansible_controllers) %}
{%     endif %}
{%     if ferm__ansible_controllers|d() %}
{%       set _ = ferm__tpl_ansible_controllers.extend(([ ferm__ansible_controllers ] if ferm__ansible_controllers is string else ferm__ansible_controllers)) %}
{%     endif %}
{%     if config.ansible_controller|d() %}
{%       set _ = ferm__tpl_ansible_controllers.extend(([ config.ansible_controller ] if config.ansible_controller is string else config.ansible_controller)) %}
{%     elif config.ansible_controllers|d() %}
{%       set _ = ferm__tpl_ansible_controllers.extend(([ config.ansible_controllers ] if config.ansible_controllers is string else config.ansible_controllers)) %}
{%     endif %}
{%     if ferm__tpl_ansible_controllers %}
{%       set _ = ferm__tpl_saddr.extend(ferm__tpl_ansible_controllers) %}
{%     endif %}
{%   endif %}
{%   if config.daddr|d() %}
{%       set _ = ferm__tpl_daddr.extend(([ config.daddr ] if config.daddr is string else config.daddr)) %}
{%   endif %}
{%   if config.sport|d() %}
{%       set _ = ferm__tpl_sport.extend(([ config.sport ] if config.sport is string else config.sport)) %}
{%   endif %}
{%   if config.dport|d() %}
{%       set _ = ferm__tpl_dport.extend(([ config.dport ] if config.dport is string else config.dport)) %}
{%   endif %}
{%   if config.state|d() %}
{%       set _ = ferm__tpl_state.extend(([ config.state ] if config.state is string else config.state)) %}
{%   endif %}
{%   if config.target|d() %}
{%     set ferm__tpl_target = config.target %}
{%   endif %}
{%   if config.hashlimit_target|d() %}
{%     set ferm__tpl_hashlimit_target = config.hashlimit_target %}
{%   endif %}
{%   if config.reject_with|d() %}
{%     set ferm__tpl_reject_with = config.reject_with %}
{%   endif %}
{%   if config.subchain is defined %}
{%     if config.subchain | bool %}
{%       set ferm__tpl_subchain = config.subchain %}
{%     else %}
{%       if config.hashlimit|d() %}
{%         set ferm__tpl_subchain = (config.type + "-" + config.hashlimit_name | d(config.name | d(rule_name))) %}
{%       else %}
{%         set ferm__tpl_subchain = '' %}
{%       endif %}
{%     endif %}
{%   endif %}
{%   if config.hashlimit|d() %}
{%     set ferm__tpl_subchain = (config.type + "-" + config.hashlimit_name | d(config.name | d(rule_name))) %}
{%   endif %}
{%   set ferm__tpl_recent_args = [] %}
{%   if ferm__tpl_recent_name %}
{%     set _ = ferm__tpl_recent_args.append('name "' + ferm__tpl_recent_name + '"') %}
{%   elif ferm__tpl_recent_set_name %}
{%     set _ = ferm__tpl_recent_args.append('set name "' + ferm__tpl_recent_set_name + '"') %}
{%   endif %}
{%   if ferm__tpl_recent_update | bool %}
{%     set _ = ferm__tpl_recent_args.append('update') %}
{%   endif %}
{%   if ferm__tpl_recent_remove | bool %}
{%     set _ = ferm__tpl_recent_args.append('remove') %}
{%   endif %}
{%   if ferm__tpl_recent_seconds %}
{%     set _ = ferm__tpl_recent_args.append('seconds ' + ferm__tpl_recent_seconds) %}
{%   endif %}
{%   if ferm__tpl_recent_hitcount %}
{%     set _ = ferm__tpl_recent_args.append('hitcount ' + ferm__tpl_recent_hitcount) %}
{%   endif %}
{%   set ferm__tpl_arguments = [] %}
{%   if ferm__tpl_interface %}
{%     if ferm__tpl_interface | length == 1 %}
{%       set _ = ferm__tpl_arguments.append("interface " +  ferm__tpl_interface | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_arguments.append("interface (" + ferm__tpl_interface | join(" ") + ")") %}
{%     endif %}
{%   elif ferm__tpl_interface_present %}
{%     if ferm__tpl_interface_present | length == 1 %}
{%       set _ = ferm__tpl_arguments.append("interface " +  ferm__tpl_interface_present | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_arguments.append("interface (" + ferm__tpl_interface_present | join(" ") + ")") %}
{%     endif %}
{%   endif %}
{%   if ferm__tpl_outerface %}
{%     if ferm__tpl_outerface | length == 1 %}
{%       set _ = ferm__tpl_arguments.append("outerface " +  ferm__tpl_outerface | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_arguments.append("outerface (" + ferm__tpl_outerface | join(" ") + ")") %}
{%     endif %}
{%   elif ferm__tpl_outerface_present %}
{%     if ferm__tpl_outerface_present | length == 1 %}
{%       set _ = ferm__tpl_arguments.append("outerface " +  ferm__tpl_outerface_present | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_arguments.append("outerface (" + ferm__tpl_outerface_present | join(" ") + ")") %}
{%     endif %}
{%   endif %}
{%   if ferm__tpl_protocol %}
{%     if ferm__tpl_protocol | length == 1 %}
{%       set _ = ferm__tpl_arguments.append("protocol " +  ferm__tpl_protocol | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_arguments.append("protocol (" + ferm__tpl_protocol | join(" ") + ")") %}
{%     endif %}
{%   elif not ferm__tpl_protocol and (ferm__tpl_sport or ferm__tpl_dport) %}
{%     set _ = ferm__tpl_arguments.append("protocol tcp") %}
{%   endif %}
{%   if ferm__tpl_protocol_syn %}
{%     set _ = ferm__tpl_arguments.append(ferm__tpl_protocol_syn | join(" ")) %}
{%   endif %}
{%   if ferm__tpl_dport %}
{%     if config.multiport|d() and config.multiport | bool %}
{%       if ferm__tpl_dport | length == 1 %}
{%         set _ = ferm__tpl_arguments.append("dport " +  ferm__tpl_dport | join(" ")) %}
{%       else %}
{%         set _ = ferm__tpl_arguments.append("mod multiport destination-ports (" + ferm__tpl_dport | join(" ") + ")") %}
{%       endif %}
{%     else %}
{%       if ferm__tpl_dport | length == 1 %}
{%         set _ = ferm__tpl_arguments.append("dport " +  ferm__tpl_dport | join(" ")) %}
{%       else %}
{%         set _ = ferm__tpl_arguments.append("dport (" + ferm__tpl_dport | join(" ") + ")") %}
{%       endif %}
{%     endif %}
{%   endif %}
{%   if ferm__tpl_state %}
{%     if ferm__tpl_state | length == 1 %}
{%       set _ = ferm__tpl_arguments.append("mod state state " +  ferm__tpl_state | join(" ")) %}
{%     else %}
{%       set _ = ferm__tpl_arguments.append("mod state state (" + ferm__tpl_state | join(" ") + ")") %}
{%     endif %}
{%   endif %}
{%   if ferm__tpl_arguments and (ferm__tpl_saddr | length > 3 or config.hashlimit|d()) %}
{%     if ferm__tpl_subchain %}
{%       set _ = ferm__tpl_arguments.append('@subchain "' + ferm__tpl_subchain + '"') %}
{%     endif %}
{%   endif %}
{%   if ferm__tpl_domain_args %}{{ ferm__tpl_domain_args | join(" ") }} {% endif %}{
{%   if config.type|d('accept') in [ 'policy', 'default_policy' ] %}
    policy {{ config.policy }};
{%   elif config.type|d('accept') == 'include' %}
    @include "{{ config.include }}";
{%   elif config.type|d('accept') == 'connection_tracking' %}
    {% if ferm__tpl_arguments %}{{ ferm__tpl_arguments | join(" ") }} {% endif %}{
        {{ ferm__tpl_tracking_module_command }} INVALID {{ ferm__tpl_tracking_invalid_target }};
        {{ ferm__tpl_tracking_module_command }} (ESTABLISHED RELATED) {{ ferm__tpl_tracking_active_target }};
    }
{%   elif config.type|d('accept') == 'recent' %}
    {% if ferm__tpl_arguments %}{{ ferm__tpl_arguments | join(" ") }} {% endif %}{

        mod recent {{ ferm__tpl_recent_args | join(" ") }} {
{%     if ((config.recent_log is undefined or config.recent_log | bool) and ferm__log | bool) %}

            &log("{{ config.recent_log_prefix | d('ipt-recent-' + config.recent_name | d(config.recent_set_name) + ': ') }}");
{%     endif %}
{%     if ferm__tpl_recent_target %}
{%       if ferm__tpl_recent_target not in [ 'ACCEPT', 'DROP', 'REJECT', 'RETURN', 'NOP' ] %}
{%         if config.include|d() %}

            @include "{{ config.include }}";
{%         elif config.realgoto is undefined or not config.realgoto | bool %}

            jump "{{ ferm__tpl_recent_target }}";
{%         elif config.realgoto|d() and config.realgoto | bool %}

            realgoto "{{ ferm__tpl_recent_target }}";
{%         endif %}
{%       elif ferm__tpl_recent_target in [ 'REJECT' ] %}

            REJECT reject-with {{ ferm__tpl_reject_with }};
{%       else %}

            {{ ferm__tpl_recent_target }};
{%       endif %}
{%     endif %}
        }
    }
{%   elif config.type|d('accept') == 'reject' %}
    protocol udp REJECT reject-with icmp-port-unreachable;
    protocol tcp REJECT reject-with tcp-reset;
    @if @eq($DOMAIN, ip) {
        REJECT reject-with icmp-proto-unreachable;
    }
{%   elif config.type|d('accept') in [ 'custom', 'raw' ] %}
{%     if ferm__tpl_domain_args %}{{ ferm__tpl_domain_args | join(" ") + " {" }}
{%     endif %}
{%     if config.rules|d() %}
{%       if ferm__tpl_domain_args %}
{{ config.rules | indent(4,true) }}
{%       else %}
{{ config.rules }}
{%       endif %}
{%     endif %}
{%     if ferm__tpl_domain_args %}}{% endif %}
{%   else %}
    {% if ferm__tpl_arguments %}{{ ferm__tpl_arguments | join(" ") }} {% endif %}{
{%     if config.hashlimit|d() %}

        mod hashlimit    hashlimit {{ config.hashlimit }}
{%       if config.hashlimit_burst|d() %}
                         hashlimit-burst {{ config.hashlimit_burst }}
{%       endif %}
                         hashlimit-mode {{ config.hashlimit_mode | d("srcip") }}
                         hashlimit-name {{ config.hashlimit_name | d(config.name | d(rule_name)) }}
{%       if config.hashlimit_expire is undefined or config.hashlimit_expire %}
                         hashlimit-htable-expire {{ ((config.hashlimit_expire|d("1800")) | int * 1000) }}
{%       endif %}
{%       if ferm__tpl_hashlimit_target not in [ 'ACCEPT', 'DROP', 'REJECT', 'RETURN', 'NOP' ] %}
{%         if config.include|d() %}

            @include "{{ config.include }}";
{%         elif config.realgoto is undefined or not config.realgoto | bool %}

            jump "{{ ferm__tpl_target }}";
{%         elif config.realgoto|d() and config.realgoto | bool %}

            realgoto "{{ ferm__tpl_target }}";
{%         endif %}
{%       elif ferm__tpl_hashlimit_target in [ 'REJECT' ] %}

            REJECT reject-with {{ ferm__tpl_reject_with }};
{%       else %}

            {{ ferm__tpl_hashlimit_target }};
{%       endif %}
{%       if ((config.log is undefined or config.log | bool) and (ferm__log | bool)) %}

        &log("{{ config.log_prefix | d('ipt-hashlimit-' + config.hashlimit_name | d(config.name | d(rule_name)) + ': ') }}");

{%       endif %}
{%     endif %}
{%     if ferm__tpl_saddr|d() %}
        @def $SITEMS = ( @ipfilter( ({{ ferm__tpl_saddr | unique | join(" ") }}) ) );
        @if @ne($SITEMS,"") {
{%       if ferm__tpl_target not in [ 'ACCEPT', 'DROP', 'REJECT', 'RETURN', 'NOP' ] %}
{%         if config.include|d() %}
            @include "{{ config.include }}";
{%         elif config.realgoto is undefined or not config.realgoto | bool %}
            saddr $SITEMS jump "{{ ferm__tpl_target }}";
{%         elif config.realgoto|d() and config.realgoto | bool %}
            saddr $SITEMS realgoto "{{ ferm__tpl_target }}";
{%         endif %}
{%       elif ferm__tpl_target in [ 'REJECT' ] %}
            saddr $SITEMS REJECT reject-with {{ ferm__tpl_reject_with }};
{%       else %}
            saddr $SITEMS {{ ferm__tpl_target }};
{%       endif %}
        }
{%     elif ferm__tpl_daddr|d() %}
        @def $DITEMS = ( @ipfilter( ({{ ferm__tpl_daddr | unique | join(" ") }}) ) );
        @if @ne($DITEMS,"") {
{%       if ferm__tpl_target not in [ 'ACCEPT', 'DROP', 'REJECT', 'RETURN', 'NOP' ] %}
{%         if config.include|d() %}
            @include "{{ config.include }}";
{%         elif config.realgoto is undefined or not config.realgoto | bool %}
            daddr $DITEMS jump "{{ ferm__tpl_target }}";
{%         elif config.realgoto|d() and config.realgoto | bool %}
            daddr $DITEMS realgoto "{{ ferm__tpl_target }}";
{%         endif %}
{%       elif ferm__tpl_target in [ 'REJECT' ] %}
            daddr $DITEMS REJECT reject-with {{ ferm__tpl_reject_with }};
{%       else %}
            daddr $DITEMS {{ ferm__tpl_target }};
{%       endif %}
        }
{%     else %}
{%       if config.accept_any is defined %}
{%         if config.accept_any | bool %}
{%           if ferm__tpl_target not in [ 'ACCEPT', 'DROP', 'REJECT', 'RETURN', 'NOP' ] %}
{%             if config.include|d() %}
        @include "{{ config.include }}";
{%             elif config.realgoto is undefined or not config.realgoto | bool %}
        jump "{{ ferm__tpl_target }}";
{%             elif config.realgoto|d() and config.realgoto | bool %}
        realgoto "{{ ferm__tpl_target }}";
{%             endif %}
{%           elif ferm__tpl_target in [ 'REJECT' ] %}
        REJECT reject-with {{ ferm__tpl_reject_with }};
{%           else %}
        {{ ferm__tpl_target }};
{%           endif %}
{%         elif not config.accept_any | bool %}
        # Connections from any IP address not allowed
{%         endif %}
{%       else %}
{%         if ferm__tpl_target not in [ 'ACCEPT', 'DROP', 'REJECT', 'RETURN', 'NOP' ] %}
{%           if config.include|d() %}
        @include "{{ config.include }}";
{%           elif config.realgoto is undefined or not config.realgoto | bool %}
        jump "{{ ferm__tpl_target }}";
{%           elif config.realgoto|d() and config.realgoto | bool %}
        realgoto "{{ ferm__tpl_target }}";
{%           endif %}
{%         elif ferm__tpl_target in [ 'REJECT' ] %}
        REJECT reject-with {{ ferm__tpl_reject_with }};
{%         else %}
{%           if ferm__tpl_arguments %}
        {{ ferm__tpl_target }};
{%           else %}
        # No rule parameters specified
{%           endif %}
{%         endif %}
{%       endif %}
{%     endif %}
    }
{%   endif %}
}
{% endmacro %}
{% set rule_name = (item.value.name | d(item.key)) %}
{% set rule = item.value %}
{% if rule.comment|d() %}
{{ (rule.comment if rule.comment is string else rule.comment | join('\n'))  | regex_replace('\n$', '') | comment(prefix='', postfix='') -}}
{% endif %}
{% if rule.rules|d() %}
{%   if rule.rules is string %}
{{ rule.rules -}}
{%   elif rule.rules is mapping %}
{{ print_rule(rule.rules) -}}
{%   elif rule.rules is not string and rule.rules is not mapping %}
{%     for element in rule.rules %}{% if not loop.first %}

{% endif %}
{%       if element is string %}
{{ element -}}
{%       elif element is mapping %}
{{ print_rule(element) -}}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endif %}
{% if rule.debug|d() | bool or (ansible_local|d() and ansible_local.tags|d() and 'debug' in ansible_local.tags) %}

{{ ("rule_name: " + (rule_name | to_nice_json)) | replace('\n$','') | comment(prefix='',postfix='') -}}
{{ ("rule: " + (rule | to_nice_json)) | replace('\n$','') | comment(prefix='',postfix='') -}}
{% endif %}
