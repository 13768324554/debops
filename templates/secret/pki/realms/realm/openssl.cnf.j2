{% set realm = item %}
# This file is managed remotely, all changes will be lost

HOME				= ./.db
RANDFILE			= $HOME/private/.random_seed

default_md			= {{ realm.digest            | default(pki_digest           | default('sha256')) }}
default_bits			= {{ realm.private_key_size  | default(pki_private_key_size | default('2048')) }}

[ ca ]
default_ca			= CA_default

[ CA_default ]
certs				= $HOME/signed
new_certs_dir			= $certs
database			= $HOME/index.txt
certificate			= $HOME/{{         realm.certificate | default(realm.filename | default(realm.cn | default(ansible_fqdn))) + '.crt' }}
private_key			= $HOME/private/{{ realm.private_key | default(realm.filename | default(realm.cn | default(ansible_fqdn))) + '.key' }}
serial				= $HOME/serial
crldir				= revoked
crlnumber			= $HOME/serial_crl
crl				= $crldir/{{     realm.revoked     | default(realm.filename | default(realm.cn | default(ansible_fqdn))) + '.crl' }}

name_opt			= ca_default
cert_opt			= ca_default

default_crl_days		= {{ realm.crl_days       | default(pki_crl_days   | default('30')) }}

preserve			= no
prompt				= no

{% if ((realm.dest is undefined or (realm.dest is defined and not realm.dest)) and
       (realm.parent is undefined or (realm.parent is defined and not realm.parent))) %}
default_days			= {{ ((realm.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_ca_multiplier | int) }}
x509_extensions			= v3_ca
copy_extensions			= copy

policy				= {{ 'policy_' + (realm.policy | default(pki_rootca_policy | default('rootca'))) }}
{% elif ((realm.dest is undefined or (realm.dest is defined and not realm.dest)) and
         (realm.parent is defined and realm.parent)) %}
default_days			= {{ ((realm.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_cert_multiplier | int) }}
x509_extensions			= v3_ca
copy_extensions			= copy

policy				= {{ 'policy_' + (realm.policy | default(pki_ca_policy | default('organization'))) }}
{% else %}
default_days			= {{ ((realm.sign_days      | default(pki_sign_days  | default('365'))) | int * pki_sign_cert_multiplier | int) }}
x509_extensions			= usr_cert
copy_extensions			= copy

policy				= {{ 'policy_' + (realm.policy | default(pki_cert_policy | default('organizational_unit'))) }}
{% endif %}

[ policy_rootca ]
countryName			= supplied
stateOrProvinceName		= supplied
localityName			= supplied
organizationName		= match
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional

[ policy_organization ]
countryName			= match
stateOrProvinceName		= match
localityName			= supplied
organizationName		= supplied
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional

[ policy_organizational_unit ]
countryName			= match
stateOrProvinceName		= match
localityName			= supplied
organizationName		= match
organizationalUnitName		= match
commonName			= supplied
emailAddress			= optional

[ policy_custom ]
countryName			= optional
stateOrProvinceName		= optional
localityName			= optional
organizationName		= optional
organizationalUnitName		= optional
commonName			= supplied
emailAddress			= optional

[ req ]
default_md			= {{ realm.digest                       | default(pki_digest           | default('sha256')) }}
default_bits			= {{ realm.private_key_size             | default(pki_private_key_size | default('2048')) }}
default_keyfile			= $HOME/private/{{ realm.private_key | default(realm.filename | default(realm.cn | default(ansible_fqdn))) + '.key' }}
prompt				= no
encrypt_key			= no

distinguished_name		= req_distinguished_name
x509_extensions			= v3_ca

string_mask			= utf8only

[ req_distinguished_name ]
{% if (realm.default_dn is undefined or (realm.default_dn is defined and realm.default_dn)) %}
countryName			= {{ realm.c    | default(pki_country)             }}
stateOrProvinceName		= {{ realm.st   | default(pki_state)               }}
localityName			= {{ realm.l    | default(pki_locality)            }}
organizationName		= {{ realm.o    | default(pki_organization)        }}
organizationalUnitName		= {{ realm.ou   | default(pki_organizational_unit) }}
commonName			= {{ realm.cn   | default(pki_common_name)         }}
{% else %}
{% if realm.c is defined and realm.c %}
countryName			= {{ realm.c }}
{% endif %}
{% if realm.st is defined and realm.st %}
stateOrProvinceName		= {{ realm.st }}
{% endif %}
{% if realm.l is defined and realm.l %}
localityName			= {{ realm.l }}
{% endif %}
{% if realm.o is defined and realm.o %}
organizationName		= {{ realm.o }}
{% endif %}
{% if realm.ou is defined and realm.ou %}
organizationalUnitName		= {{ realm.ou }}
{% endif %}
{% if realm.cn is defined and realm.cn %}
commonName			= {{ realm.cn }}
{% endif %}
{% endif %}

[ req_attributes ]

[ usr_cert ]
basicConstraints		= critical, CA:FALSE
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid, issuer
keyUsage			= critical, digitalSignature, keyEncipherment
extendedKeyUsage		= serverAuth, clientAuth

[ v3_req ]
basicConstraints		= critical, CA:FALSE
keyUsage			= critical, digitalSignature, keyEncipherment
extendedKeyUsage		= serverAuth, clientAuth
subjectAltName			= @subject_alt_names

[ v3_ca ]
basicConstraints		= CA:TRUE
keyUsage			= cRLSign, keyCertSign
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always, issuer:always

[ subject_alt_names ]
{% set pki_tpl_mail = [] %}
{% if (realm.default_dn is undefined or (realm.default_dn is defined and realm.default_dn)) %}
{%   set _ = pki_tpl_mail.append(realm.e | default(pki_email)) %}
{% endif %}
{% if realm.mail is defined and realm.mail %}
{%   set pki_tpl_mail = pki_tpl_mail + realm.mail %}
{% endif %}
{% if pki_tpl_mail is defined and pki_tpl_mail %}
{% for mail_name in pki_tpl_mail %}
email.{{ loop.index0 }}		= {{ mail_name }}
{% endfor %}
{% endif %}
{% set pki_tpl_dns = [] %}
{% if (realm.default_dn is undefined or (realm.default_dn is defined and realm.default_dn)) %}
{%   set _ = pki_tpl_dns.append(realm.cn | default(pki_common_name)) %}
{% endif %}
{% if realm.dns is defined and realm.dns %}
{%   set pki_tpl_dns = pki_tpl_dns + realm.dns %}
{% endif %}
{% if pki_tpl_dns is defined and pki_tpl_dns %}
{% for dns_name in pki_tpl_dns %}
DNS.{{ loop.index0 }}		= {{ dns_name }}
{% endfor %}
{% endif %}
{% if realm.uri is defined and realm.uri %}
{% for uri_name in realm.uri %}
URI.{{ loop.index0 }}		= {{ uri_name }}
{% endfor %}
{% endif %}
{% if realm.ip is defined and realm.ip %}
{% for ip_name in realm.ip %}
IP.{{ loop.index0 }}		= {{ ip_name }}
{% endfor %}
{% endif %}

# vim:ft=dosini
