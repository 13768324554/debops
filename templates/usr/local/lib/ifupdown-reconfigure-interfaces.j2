#!/bin/bash

# {{ ansible_managed }}

# Reconfigure changed network interfaces
# Part of the debops.ifupdown Ansible role
# See https://github.com/debops/ansible-ifupdown/ for more details

# If this file is present, interfaces are configured for the first time
interface_init_file="{{ ifupdown_reconfigure_init_file }}"

# Get the name of the temporary file which holds the list of modified interfaces
interface_file="${1}"

if [ -z "${interface_file}" ] ; then
  echo "Error: no file with list of interfaces specified" ; exit 1
fi

# Make sure to remove the temporary directory when script is finished
trap "rm -rf $(dirname ${interface_file})" EXIT

containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

# Re-initialization of interfaces, stop all/unknown ones
stop_networking () {

  if [ -d /run/systemd/system ] ; then
    systemctl stop networking.service
  else
    service networking stop
  fi

}

# Check what init we are using and bring interface down correctly
interface_down () {

  if [ -d /run/systemd/system ] ; then

    systemctl stop ifup@${1}.service

    if $(containsElement "${1}" "${interface_removed[@]}") ; then
      test -e /etc/systemd/system/multi-user.target.wants/ifup@${1}.service && \
        rm -f /etc/systemd/system/multi-user.target.wants/ifup@${1}.service
    fi

  else
    ifdown ${1}
  fi

}

# Check what init we are using and bring interface up correctly
interface_up () {

  if [ -d /run/systemd/system ] ; then

    if $(containsElement "${1}" "${interface_enabled[@]}") ; then
      test -e /etc/systemd/system/multi-user.target.wants/ifup@${1}.service || \
        ln -s /lib/systemd/system/ifup@.service /etc/systemd/system/multi-user.target.wants/ifup@${1}.service
    fi

    systemctl start ifup@${1}.service

  else
    ifup ${1}
  fi

}

# Check if any interfaces have changed, if so, first stop all of them using
# current configuration, apply the new configuration and bring the modified
# interfaces back up
if [ -r ${interface_file} ] ; then
  source ${interface_file}

  if [ ${{ '{' }}#interface_list[@]} -ge 0 ]; then

    # Stop all interfaces on the first run
    if [ -e ${interface_init_file} ] ; then

      stop_networking

    else

      for iface in ${interface_list[@]} ; do
        interface_down ${iface}
      done

    fi

    # Apply new interface configuration
    rsync -a --delete /etc/network/interfaces.config.d/ /etc/network/interfaces.d

    for iface in ${interface_list[@]} ; do
      interface_up ${iface}
    done

  fi

fi

