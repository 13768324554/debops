#!/bin/sh

# This file is managed by Ansible, all changes will be lost

export HOME=/root

# Prevent service startup while we are working in chroot
cat > /usr/sbin/policy-rc.d <<EOF
#!/bin/sh
echo "All runlevel operations denied by policy" >&2
exit 101
EOF
chmod +x /usr/sbin/policy-rc.d

# Setup grub, cgroup, LXC

if [ -r "/etc/default/grub" ]; then
	perl -pi -e 's,^GRUB_TIMEOUT=5$,GRUB_TIMEOUT=1,' /etc/default/grub
	perl -pi -e 's,GRUB_CMDLINE_LINUX="(.*)"$,GRUB_CMDLINE_LINUX="$1 elevator=noop cgroup_enable=memory swapaccount=1",' /etc/default/grub
	perl -pi -e 's,^#GRUB_DISABLE_RECOVERY="true"$,GRUB_DISABLE_RECOVERY="true",' /etc/default/grub
	update-grub
fi

{% if apt_debian_preseed_sshkey is defined and apt_debian_preseed_sshkey %}
# Inject ssh key into root account
mkdir -p -m 700 /root/.ssh
echo "{{ apt_debian_preseed_sshkey }}" > /root/.ssh/authorized_keys
{% if apt_debian_preseed_username is defined and apt_debian_preseed_username %}

# Create admin system group
addgroup --system admins

# Configure admin group in sudo
echo "%admins ALL = (ALL) NOPASSWD: ALL" > /etc/sudoers.d/admins
chmod 440 /etc/sudoers.d/admins

# Create administrator account
adduser --disabled-password --home /home/{{ apt_debian_preseed_username }} --gecos "System Administrator" {{ apt_debian_preseed_username }}
adduser {{ apt_debian_preseed_username }} admins

mkdir -p -m 700 /home/{{ apt_debian_preseed_username }}/.ssh
echo "{{ apt_debian_preseed_sshkey }}" > /home/{{ apt_debian_preseed_username }}/.ssh/authorized_keys
chown -R {{ apt_debian_preseed_username }}:{{ apt_debian_preseed_username }} /home/{{ apt_debian_preseed_username }}/.ssh
{% endif %}
{% endif %}
{% if secret is not defined %}

# Expire root password to force change
passwd --expire root
{% endif %}

# Unlock service startup
rm -rf /usr/sbin/policy-rc.d

