{% macro merge_dict(current_dict, to_merge_dict, dict_key='name') %}
{%   set merged_dict = current_dict %}
{%   if to_merge_dict %}
{%     if to_merge_dict is mapping %}
{%       for dict_name in to_merge_dict.keys() | sort %}
{%         if to_merge_dict[dict_name][dict_key]|d() %}
{%           set _ = merged_dict.update({to_merge_dict[dict_name][dict_key]:(current_dict[to_merge_dict[dict_name][dict_key]]|d({}) | combine(to_merge_dict[dict_name], recursive=True))}) %}
{%         elif to_merge_dict[dict_name][dict_key] is undefined %}
{%           set _ = merged_dict.update({dict_name:(current_dict[dict_name]|d({}) | combine(to_merge_dict[dict_name], recursive=True))}) %}
{%         endif %}
{%       endfor %}
{%     elif to_merge_dict is not string and to_merge_dict is not mapping %}
{%       set flattened_dict = lookup("flattened", to_merge_dict) %}
{%       for element in ([ flattened_dict ] if flattened_dict is mapping else flattened_dict) %}
{%         if element[dict_key]|d() %}
{%           set _ = merged_dict.update({element[dict_key]:(current_dict[element[dict_key]]|d({}) | combine(element, recursive=True))}) %}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   endif %}
{{ merged_dict | to_json }}
{% endmacro %}
{% set ferm__tpl_merge_default =   (merge_dict({}, ferm__default_rules, 'name') | from_json) %}
{% set ferm__tpl_merge_dependent = (merge_dict(ferm__tpl_merge_default,   ferm__dependent_rules, 'name') | from_json) %}
{% set ferm__tpl_fix_dependent =   (merge_dict(ferm__tpl_merge_dependent, ferm__fix_dependent_rules, 'name') | from_json) %}
{% set ferm__tpl_merge_all =       (merge_dict(ferm__tpl_fix_dependent,   ferm__rules,           'name') | from_json) %}
{% set ferm__tpl_merge_group =     (merge_dict(ferm__tpl_merge_all,       ferm__group_rules,     'name') | from_json) %}
{% set ferm__tpl_rules =           (merge_dict(ferm__tpl_merge_group,     ferm__host_rules,      'name') | from_json) %}
{% set ferm__tpl_filtered_rules = {} %}
{% for name, params in ferm__tpl_rules.iteritems() %}
{%   set rule_name = (params["name"] | d(name)) %}
{%   if params["rules"] is undefined %}
{%     set _ = params.update({"rules":[]}) %}
{%     set ferm__tpl_rule = {} %}
{%     for parameter in params.keys() | sort %}
{%       if parameter not in [ 'comment', 'rule_state', 'name', 'rules', 'template', 'weight', 'weight_class', 'role', 'role_weight', 'delete', 'when', 'enabled' ] %}
{%         if parameter == 'state' %}
{%           if params["state"] not in [ 'present', 'absent', 'ignore' ] %}
{%             set _ = ferm__tpl_rule.update({parameter:params[parameter]}) %}
{%           endif %}
{%         else %}
{%           set _ = ferm__tpl_rule.update({parameter:params[parameter]}) %}
{%         endif %}
{%       endif %}
{%     endfor %}
{%     set _ = params["rules"].append(ferm__tpl_rule) %}
{%   endif %}
{%   if params["state"] is undefined or params["state"] not in [ 'present', 'absent', 'ignore' ] %}
{%     if params["enabled"]|d() %}
{%       if params["enabled"]|bool %}
{%         set _ = params.update({"state":"present"}) %}
{%       else %}
{%         set _ = params.update({"state":"absent"}) %}
{%       endif %}
{%     elif params["rule_state"]|d() %}
{%       set _ = params.update({"state":params["rule_state"]}) %}
{%     else %}
{%       set _ = params.update({"state":"present"}) %}
{%     endif %}
{%   endif %}
{%   set _ = ferm__tpl_filtered_rules.update({rule_name:params}) %}
{% endfor %}
{{ ferm__tpl_filtered_rules | to_yaml }}
