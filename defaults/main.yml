---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# --------------------
#   OpenSSH packages
# --------------------

# .. envvar:: sshd_base_packages
#
# List of base packages that should be installed for OpenSSH support.
sshd_base_packages: [ 'openssh-server', 'openssh-client',
                      'openssh-blacklist', 'openssh-blacklist-extra',
                      'molly-guard' ]

# .. envvar:: sshd_packages
#
# List of additional packages to install.
sshd_packages: []


# -----------------------------------
#   Host whitelists and allow lists
# -----------------------------------

# .. envvar:: sshd_whitelist
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a global list.
sshd_whitelist: []


# .. envvar:: sshd_group_whitelist
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a group-based list.
sshd_group_whitelist: []


# .. envvar:: sshd_host_whitelist
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a host-based list.
sshd_host_whitelist: []


# .. envvar:: sshd_allow
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in ``iptables``. This is a global list.
sshd_allow: []


# .. envvar:: sshd_group_allow
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in ``iptables``. This is a group list.
sshd_group_allow: []


# .. envvar:: sshd_host_allow
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in ``iptables``. This is a host list.
sshd_host_allow: []


# ------------------------------
#   TCP Wrappers configuration
# ------------------------------

# .. envvar:: sshd_tcpwrappers_default
#
# If list of allowed hosts is not specified, this value will be set in TCP
# Wrappers for ``sshd`` service. By default any host is allowed to connect.
sshd_tcpwrappers_default: 'ALL'


# ---------------------------------
#   Firewall (ferm) configuration
# ---------------------------------

# .. envvar:: sshd_ferm_limit
#
# Enable or disable limited SSH access from all hosts in ``ip(6)tables``.
# Recent new connections are filtered and when too many new connections are
# created in specified time window, host is added to the recent blocklist.
sshd_ferm_limit: True


# .. envvar:: sshd_ferm_limit_seconds
#
# Length of the time window used by firewall to catch new offenders,
# by default 5 minutes.
sshd_ferm_limit_seconds: '{{ (60 * 5) }}'


# .. envvar:: sshd_ferm_limit_hits
#
# How many new connections to allow in specified time window.
sshd_ferm_limit_hits: '8'


# .. envvar:: sshd_ferm_limit_destination
#
# Name of the iptables recent list where offenders will be added.
sshd_ferm_limit_destination: 'badguys'


# .. envvar:: sshd_ferm_ports
#
# List of TCP ports to open in the firewall for SSH connections. You can use
# port numbers or service names from ``/etc/services``.
sshd_ferm_ports: [ 'ssh' ]


# --------------------------------
#   OpenSSH server configuration
# --------------------------------

# .. envvar:: sshd_ports
#
# List of ports which ``sshd`` will listen on.
sshd_ports: [ '22' ]


# .. envvar:: sshd_listen
#
# List of IP addresses on which ``sshd`` should listen for new connections. If
# it's empty, ``sshd`` listens on all interfaces.
sshd_listen: []


# .. envvar:: sshd_host_keys
#
# List of SSH host keys that should be enabled, in order of preference.
sshd_host_keys: [ 'ed25519', 'rsa', 'ecdsa' ]


# .. envvar:: sshd_banner
#
# Path to file which should be displayed before user authentication.
sshd_banner: 'none'


# .. envvar:: sshd_log_level
#
# How much information should be logged by ``sshd`` server.
sshd_log_level: 'INFO'


# .. envvar:: sshd_permit_root_login
#
# Specify if access to ``root`` account should be granted. By default ``root``
# can be accessed only using SSH public keys.
sshd_permit_root_login: 'without-password'


# .. envvar:: sshd_password_authentication
#
# Enable or disable password authentication.
sshd_password_authentication: 'no'


# .. envvar:: sshd_x11_forwarding
#
# Enable or disable X11 forwarding by the server.
sshd_x11_forwarding: 'no'


# .. envvar:: sshd_max_auth_tries
#
# Maximum number of failed authentication attempts allowed by the server.
sshd_max_auth_tries: '4'


# .. envvar:: sshd_max_startups
#
# Maximum number of unauthenticated connections (3), after which there's 80%
# probability of next unauthenticated connection to be dropped, finishing at 7,
# after which all new unauthenticated connections will be refused.
sshd_max_startups: '3:80:7'


# .. envvar:: sshd_login_grace_time
#
# Time after which unauthenticated sessions are disconnected.
sshd_login_grace_time: '20s'


# .. envvar:: sshd_privilege_separation
#
# Specify if ``sshd`` should use unprivileged processes for incoming session
# authentication. Setting this to ``sandbox`` enables use of additional
# kernel restrictions.
sshd_privilege_separation: 'sandbox'


# .. envvar:: sshd_custom_options
#
# Additional ``sshd_config(5)`` options specified in a YAML text block format.
sshd_custom_options: ''


# ------------------------------
#   Group-based access control
# ------------------------------

# .. envvar:: sshd_allow_groups
#
# List of UNIX groups which allow connections to SSH service (global).
sshd_allow_groups: [ 'root', 'admins', 'sshusers', 'sftponly' ]


# .. envvar:: sshd_group_allow_groups
#
# List of UNIX groups which allow connections to SSH service (host group).
sshd_group_allow_groups: []


# .. envvar:: sshd_host_allow_groups
#
# List of UNIX groups which allow connections to SSH service (host).
sshd_host_allow_groups: []


# ------------------------------
#   Authorized keys management
# ------------------------------

# .. envvar:: sshd_authorized_keys
#
# List of files which contain SSH public keys, to be used to authenticate
# remote users.
sshd_authorized_keys: '{{ sshd_authorized_keys_system +
                          sshd_authorized_keys_user }}'


# .. envvar:: sshd_authorized_keys_system
#
# List of system-wide files containing SSH public keys. These files are
# expected to be maintained by system administrator and might be used in
# restricted environments (for example SFTPonly accounts).
sshd_authorized_keys_system:
  - '/etc/ssh/authorized_keys/%u'


# .. envvar:: sshd_authorized_keys_user
#
# List of user files containing SSH public keys. These files are maintained by
# the users themselves.
sshd_authorized_keys_user:
  - '%h/.ssh/authorized_keys'
  - '%h/.ssh/authorized_keys2'


# ---------------------------------
#   System-wide host fingerprints
# ---------------------------------

# .. envvar:: sshd_known_hosts
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (global).
sshd_known_hosts: []


# .. envvar:: sshd_group_known_hosts
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (host group).
sshd_group_known_hosts: []


# .. envvar:: sshd_host_known_hosts
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (host).
sshd_host_known_hosts: []


# .. envvar:: sshd_known_hosts_file
#
# System-wide file where host fingerprints are stored.
sshd_known_hosts_file: '/etc/ssh/ssh_known_hosts'


# .. envvar:: sshd_known_hosts_command
#
# Command used to scan host fingerprints into system-wide known hosts file.
sshd_known_hosts_command: 'ssh-keyscan -H -T 10'


# -------------------------
#   Encryption parameters
# -------------------------

# .. envvar:: sshd_ciphers_map
#
# Dict with list of ciphers which should be used by the ``sshd`` server,
# depending on available version, ordered from newest to oldest. Newer version
# supersedes older version.
sshd_ciphers_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'chacha20-poly1305@openssh.com', 'aes256-gcm@openssh.com',
           'aes128-gcm@openssh.com', 'aes256-ctr', 'aes192-ctr',
           'aes128-ctr' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'aes256-ctr', 'aes192-ctr', 'aes128-ctr' ]


# .. envvar:: sshd_kex_algorithms_map
#
# Dict with list of key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, ordered from newest to
# oldest. Newer version supersedes older version.
sshd_kex_algorithms_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'curve25519-sha256@libssh.org', 'ecdh-sha2-nistp521',
           'ecdh-sha2-nistp384', 'ecdh-sha2-nistp256',
           'diffie-hellman-group-exchange-sha256' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'diffie-hellman-group-exchange-sha256' ]


# .. envvar:: sshd_macs_map
#
# Dict with list of message authentication code algorithms which should be used
# by the ``sshd`` server, depending on available version, ordered from newest
# to oldest. Newer version supersedes older version.
sshd_macs_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'hmac-sha2-512-etm@openssh.com', 'hmac-sha2-256-etm@openssh.com',
           'umac-128-etm@openssh.com', 'hmac-sha2-512', 'hmac-sha2-256',
           'umac-128@openssh.com' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'hmac-sha2-512', 'hmac-sha2-256' , 'hmac-ripemd160' ]

# .. envvar:: sshd_paranoid
#
# If set to True, only the first item (which is considered the strongest method
# available) from the lists ``sshd_ciphers_map``,
# ``sshd_kex_algorithms_map`` and ``sshd_macs_map`` will be configured for
# ``sshd``. Use this with care as it will deny access to anyone not able to use
# the first cryptographic method.
# See https://github.com/debops/ansible-sshd/issues/20
sshd_paranoid: False


# ---------------------------------------
#   Authorized key lookup configuration
# ---------------------------------------

# .. envvar:: sshd_authorized_keys_lookup
#
# Enable support for looking up authorized public keys in external data sources
# (currently LDAP is supported). This function works only with OpenSSH 6.2+.
sshd_authorized_keys_lookup: False


# .. envvar:: sshd_authorized_keys_lookup_user
#
# System user account which will be used to look up authorized keys.
sshd_authorized_keys_lookup_user: 'sshd-lookup'


# .. envvar:: sshd_authorized_keys_lookup_group
#
# System group which will be used to look up authorized keys.
sshd_authorized_keys_lookup_group: 'sshd-lookup'


# .. envvar:: sshd_authorized_keys_lookup_home
#
# Home directory used by authorized key lookup user.
sshd_authorized_keys_lookup_home: '/var/run/{{ sshd_authorized_keys_lookup_user }}'


# .. envvar:: sshd_authorized_keys_lookup_type
#
# List of lookup scripts that should be enabled on a host.
sshd_authorized_keys_lookup_type: [ 'ldap' ]


# -----------------------------
#   LDAP lookup configuration
# -----------------------------

# .. envvar:: sshd_ldap_domain
#
# Base DNS domain to use for LDAP BaseDN generation.
sshd_ldap_domain: '{{ ansible_domain }}'


# .. envvar:: sshd_ldap_base
#
# LDAP base used for BaseDN generation.
sshd_ldap_base: '{{ "dc=" + sshd_ldap_domain.split(".") | join(",dc=") }}'


# .. envvar:: sshd_ldap_bind_basedn
#
# LDAP BaseDN of the host account used to bind to the server.
sshd_ldap_bind_basedn: '{{ "ou=Machines," + sshd_ldap_base }}'


# .. envvar:: sshd_ldap_bind_cn
#
# Host account name in LDAP.
sshd_ldap_bind_cn: 'cn={{ ansible_hostname }}'


# .. envvar:: sshd_ldap_bind_dn
#
# Machine entry used to bind to the LDAP server.
sshd_ldap_bind_dn: '{{ sshd_ldap_bind_cn + "," + sshd_ldap_bind_basedn }}'


# .. envvar:: sshd_ldap_bind_basepw
#
# Base path to file with host LDAP password in ``secret/`` directory. See
# ``debops.secret`` Ansible role for more details.
sshd_ldap_bind_basepw: '{{ secret + "/credentials/" +
                           ansible_fqdn + "/ldap/host/binddn/" +
                           sshd_ldap_bind_dn + ".password" }}'


# .. envvar:: sshd_ldap_bind_pw
#
# Machine password used for binding to LDAP database.
sshd_ldap_bind_pw: '{{ lookup("password", sshd_ldap_bind_basepw +
                       " length=" + sshd_ldap_password_length) }}'


# .. envvar:: sshd_ldap_bind_pw_file
#
# Path to file which stores machine bind password on remote host.
sshd_ldap_bind_pw_file: '/etc/ssh/ldap_authorized_keys_bindpw'


# .. envvar:: sshd_ldap_password_length
#
# Length of generated LDAP machine password.
sshd_ldap_password_length: '48'


# .. envvar:: sshd_ldap_filter
#
# Active ``ldapsearch`` filter used to select correct account while looking up
# the SSH public key.
sshd_ldap_filter: '{{ sshd_ldap_filter_map["service+host"] }}'


# .. envvar:: sshd_ldap_filter_map
#
# Dict with set of available LDAP filters that can be used to lookup the SSH
# public key.
sshd_ldap_filter_map:

  # User account needs 'authorizedService' attribute
  'service': '(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service))'

  # User account needs 'host' attribute
  'host': '(&(objectClass=posixAccount)(uid=$username)(|(host=$hostname)(host=$fqdn)(host=\\*.$domain)(host=\\*)))'

  # User account needs both 'authorizedService' and 'host' attributes.
  'service+host': '(&(objectClass=posixAccount)(uid=$username)(authorizedService=$service)(|(host=$hostname)(host=$fqdn)(host=\\*.$domain)(host=\\*)))'


# ----------------------------
#   Match conditional blocks
# ----------------------------

# .. envvar:: sshd_match_list
#
# List of conditional ``Match`` blocks to include in ``sshd_config``.
# Required parameters:
#
# - ``match``: specify User, Group, or other Match arguments which should
#   activate a given configuration block.
#
# - ``options``: YAML text block which contains ``sshd_config(5)`` options
#   active in a given Match block.
#
sshd_match_list: [ '{{ sshd_match_group_sftponly }}' ]


# .. envvar:: sshd_match_group_sftponly
#
# Default ``Match`` conditional block which defines configuration for SFTPonly
# accounts.
sshd_match_group_sftponly:
  match: 'Group sftponly'
  options: |
    AuthorizedKeysFile {{ sshd_authorized_keys_system | join(' ') }}
    ChrootDirectory %h
    X11Forwarding no
    AllowAgentForwarding no
    AllowTcpForwarding no
    PermitTunnel no
    ForceCommand internal-sftp

