---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# .. _cryptsetup__ref_default_variables:
#
# debops.cryptsetup default variables [[[
# =======================================

# .. contents:: Sections
#    :local:
#
# .. include:: includes/all.rst


# Required packages [[[
# ---------------------

# .. envvar:: cryptsetup__base_packages [[[
#
# List of base packages to install.
cryptsetup__base_packages:
  - 'cryptsetup'
                                                                   # ]]]
                                                                   # ]]]
# List of encrypted filesystems [[[
# ---------------------------------

# .. envvar:: cryptsetup__devices [[[
#
# Global definition list of encrypted filesystems.
#
# Refer to the :ref:`documentation of all options <cryptsetup__devices>` for more details.
cryptsetup__devices: []

                                                                   # ]]]
# .. envvar:: cryptsetup__group_devices [[[
#
# Host group definition list of encrypted filesystems.
cryptsetup__group_devices: []

                                                                   # ]]]
# .. envvar:: cryptsetup__host_devices [[[
#
# Host definition list of encrypted filesystems.
cryptsetup__host_devices: []
                                                                   # ]]]
                                                                   # ]]]
# Keyfile settings [[[
# --------------------

# .. envvar:: cryptsetup__secret_path [[[
#
# Location where keyfiles are generated and stored on the Ansible controller.
cryptsetup__secret_path: '{{ secret + "/cryptsetup/" + ansible_fqdn }}'

                                                                   # ]]]
# .. envvar:: cryptsetup__secret_owner [[[
#
# System user who owns the secret directory and all files in it on the Ansible controller.
# You might want to change that if you run this role as root on the Ansible
# controller itself but the secrets directory is managed by another user.
# The default is set to the special value ``omit`` to use the owner under which
# the role is run.
cryptsetup__secret_owner: '{{ omit }}'

                                                                   # ]]]
# .. envvar:: cryptsetup__secret_group [[[
#
# System group of the secret directory and all files in it on the Ansible controller.
# You might want to change that if you run this role as root on the Ansible
# controller itself but the secrets directory is managed by another user.
# The default is set to the special value ``omit`` to use the primary group
# under which the role is run.
cryptsetup__secret_group: '{{ omit }}'

                                                                   # ]]]
# .. envvar:: cryptsetup__secret_mode [[[
#
# File mode used for the secret directory and all files in it on the Ansible controller.
cryptsetup__secret_mode: 'u=rwX,g=,o='

                                                                   # ]]]
# .. envvar:: cryptsetup__keyfile_remote_location [[[
#
# Directory where the keyfiles will be stored on the remote system.
cryptsetup__keyfile_remote_location: '{{ (ansible_local.root.var
                                        if (ansible_local|d() and ansible_local.root|d() and
                                            ansible_local.root.var|d())
                                        else "/var/local") + "/keyfiles" }}'

                                                                   # ]]]
# .. envvar:: cryptsetup__keyfile_owner [[[
#
# System user who owns the keyfiles on the remote system.
cryptsetup__keyfile_owner: 'root'

                                                                   # ]]]
# .. envvar:: cryptsetup__keyfile_group [[[
#
# System group of the keyfiles on the remote system.
cryptsetup__keyfile_group: 'root'

                                                                   # ]]]
# .. envvar:: cryptsetup__keyfile_mode [[[
#
# File mode used for the keyfiles on the remote system.
cryptsetup__keyfile_mode: '0600'
                                                                   # ]]]
                                                                   # ]]]
# LUKS header backup [[[
# ----------------------

# .. envvar:: cryptsetup__header_backup_remote_location [[[
#
# Directory where the header backups from LUKS will be stored on the remote system.
#
# The LUKS header backup will be stored in this file:
#
# .. code-block:: jinja
#    :linenos:
#
#    {{ cryptsetup__header_backup_remote_location + "/" + item.name + "_header_backup.raw" }}
#
# on the Ansible controller.
cryptsetup__header_backup_remote_location: '{{ (ansible_local.root.backup
                                              if (ansible_local|d() and ansible_local.root|d() and
                                                  ansible_local.root.backup|d())
                                              else "/var/backups") + "/luks_header_backup" }}'

                                                                   # ]]]
# .. envvar:: cryptsetup__header_backup [[[
#
# Should a header backup be created and stored on the remote system and the
# Ansible controller?
#
# .. note:: The LUKS header is only stored once in the first few kilobytes of
#    a given block device.
#    When the header gets corrupted, the plaintext data might be inaccessible!
#    Thus it is recommended to have a header backup on hand.
#
# Set to ``False`` to disable header backup creation and to ensure that the
# header backup is absent on the remote system.
cryptsetup__header_backup: True
                                                                   # ]]]
                                                                   # ]]]
# Ciphertext block device options [[[
# -----------------------------------

# .. envvar:: cryptsetup__use_uuid [[[
#
# Use the UUID of the ciphertext block device in :file:`/etc/crypttab` instead
# of the file path given by ``ciphertext_block_device``.
cryptsetup__use_uuid: True
                                                                   # ]]]
                                                                   # ]]]
# Filesystem options [[[
# ----------------------

# .. envvar:: cryptsetup__fstype [[[
#
# Default filesystem to create and configure in :file:`/etc/fstab`.
cryptsetup__fstype: 'ext4'

                                                                   # ]]]
# .. envvar:: cryptsetup__mount_options [[[
#
# List of default mount options.
cryptsetup__mount_options:
  - 'noatime'
  - 'nodiratime'

                                                                   # ]]]
# .. envvar:: cryptsetup__state [[[
#
# Default ``state`` for all devices. Can be overwritten for each device using
# ``item.state``.
cryptsetup__state: 'mounted'

                                                                   # ]]]
# .. envvar:: cryptsetup__mountpoint_parent_directory [[[
#
# Parent directory under which all encrypted filesystems will be mounted.
cryptsetup__mountpoint_parent_directory: '/media'
                                                                   # ]]]
                                                                   # ]]]
# Cryptography defaults [[[
# -------------------------

# .. envvar:: cryptsetup__crypttab_options [[[
#
# Default list of options to configure for each device in
# :file:`/etc/crypttab`. Can be overwritten by ``item.crypttab_options``.
# See :manpage:`crypttab(5)` for details.
cryptsetup__crypttab_options:
  - 'luks'

                                                                   # ]]]
# .. envvar:: cryptsetup__hash [[[
#
# Specifies the hash used in the LUKS key setup scheme and volume key digest
# for :command:`cryptsetup luksFormat`.
# Corresponds with the ``--hash`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``sha1``.
# Set to ``default`` to use the compiled-in default of :command:`cryptsetup`.
#
# Refs: https://security.stackexchange.com/a/40218
cryptsetup__hash: 'sha512'

                                                                   # ]]]
# .. envvar:: cryptsetup__cipher [[[
#
# Set the cipher specification string.
# Corresponds with the ``--cipher`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``aes-xts-plain64``.
# Set to ``default`` to use the compiled-in default of :command:`cryptsetup`.
cryptsetup__cipher: 'default'

                                                                   # ]]]
# .. envvar:: cryptsetup__key_size [[[
#
# Sets key size in bits. The argument has to be a multiple of 8. The possible
# key-sizes are limited by the cipher and mode used.
# Corresponds with the ``--key-size`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``256``.
# Set to ``default`` to use the compiled-in default of :command:`cryptsetup`.
#
# Note that in XTS mode, only half of the key size specified here will be used
# for the block cypher (512 will result in AES-256).
# Using AES-128 is still considered secure and is faster in most cases.
# The reason to go with a different default value then the compiled-in default
# of :command:`cryptsetup` was to have long-term secure storage even when
# quantum-computing become available to your adversary.
# Plus, with hardware acceleration available in most x86 CPUs nowadays, it
# really done not make much of a difference anymore (at least for AES).
#
# Refs: https://crypto.stackexchange.com/a/7869
cryptsetup__key_size: 512

                                                                   # ]]]
# .. envvar:: cryptsetup__use_dev_random [[[
#
# Should :file:`/dev/random` be used to generate the LUKS master key?
# Corresponds with the ``--use-random`` and ``--use-urandom`` parameters.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is :file:`/dev/urandom`.
# Set to ``default`` to use the compiled-in default of :command:`cryptsetup`.
#
# Check :manpage:`random(4)` and https://bettercrypto.org/ for details.
cryptsetup__use_dev_random: True

                                                                   # ]]]
# .. envvar:: cryptsetup__iter_time [[[
#
# The number of milliseconds to spend with PBKDF2 passphrase processing.
# Corresponds with the ``--iter-time`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``1000`` milliseconds.
# Set to ``default`` to use the compiled-in default of :command:`cryptsetup`.
cryptsetup__iter_time: 'default'
                                                                   # ]]]
                                                                   # ]]]
                                                                   # ]]]
