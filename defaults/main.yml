---

# Enable PostgreSQL Global Developmet Group APT repository?
# More information: https://wiki.postgresql.org/wiki/Apt
postgresql_server_upstream: False

# List of base PostgreSQL packages to install
postgresql_server_base_packages: [ 'postgresql', 'postgresql-client',
                                   'postgresql-contrib', 'python-psycopg2' ]

# Install additional packages with PostgreSQL
postgresql_server_packages: []

# System user and group which managages PostgreSQL clusters
postgresql_server_user: 'postgres'
postgresql_server_group: 'postgres'

# This is a counterpart variable to the one in ``debops.postgresql`` role, it
# should point to the FQDN hostname of the server so that other role can
# correctly delegate Ansible tasks.
postgresql_server_delegate_to: '{{ ansible_fqdn }}'

# List of IP addresses or CIDR subnets that can connect to all PostgreSQL
# clusters. If it's empty, remote connections are blocked, but individual
# clusters can add their own firewall rules.
postgresql_server_allow: []

# List of local UNIX accounts which will be allowed to login to any database
# as 'postgres' role with peer authentication.
postgresql_server_admins: [ 'root', '*postgres*',
                            '{{ ansible_ssh_user
                                if (ansible_ssh_user != "root")
                                else "" }}' ]

# The default password for the PostgreSQL admin account (not the 'postgres'
# UNIX system account)
postgresql_server_admin_password: "{{ lookup('password', secret + '/credentials/' +
                                      ansible_fqdn + '/postgresql/default/' +
                                      postgresql_server_user + '/password length=20') }}"

# List of local UNIX accounts that are implicitly trusted by PostgreSQL server
# and can login to their own roles without password
postgresql_server_trusted: [ '{{ ansible_ssh_user
                                 if (ansible_ssh_user != "root")
                                 else "" }}' ]

# Where to log system/error messages
# Options: stderr, csvlog, syslog, and eventlog
postgresql_server_log_destination: 'syslog'

# Default localisation settings. Error messages will be printed in English
# independently of selected PostgreSQL locale. This locale will also be used at
# cluster creation to set default database encoding
postgresql_server_locale: 'en_US.UTF-8'
postgresql_server_locale_messages: 'C'

# Timezone configured in PostgreSQL clusters
postgresql_server_timezone: '{{ ansible_local.timezone
                                if (ansible_local|d() and ansible_local.timezone|d())
                                else "Etc/UTC" }}'

# Enable or disable support for PKI infrastructure managed by 'debops.pki'
postgresql_server_pki: '{{ (True
                            if (ansible_local|d() and ansible_local.pki|d() and
                                ansible_local.pki.enabled|d() | bool)
                            else False) | bool }}'

# Base path of PKI infrastructure, managed by 'debops.pki' role
postgresql_server_pki_path: '{{ ansible_local.pki.base_path
                               if (ansible_local|d() and ansible_local.pki|d() and
                                   ansible_local.pki.base_path|d())
                               else "/etc/pki" }}'

# PKI realm used by PostgreSQL role
postgresql_server_pki_realm: '{{ ansible_local.pki.realm
                                 if (ansible_local|d() and ansible_local.pki|d() and
                                     ansible_local.pki.realm|d())
                                 else "system" }}'

# Default Root CA certificate used by PostgreSQL clusters, relative to
# 'postgresql_pki_realm' path
postgresql_server_pki_ca: 'CA.crt'

# SSL certificate, private key and CRL used by PostgreSQL clusters if not
# specified otherwise, relative to 'postgesql_pki_realm' path
postgresql_server_pki_crt: 'default.crt'
postgresql_server_pki_key: 'default.key'
postgresql_server_pki_crl: 'default.crl'

# Default SSL ciphers enabled in PostgreSQL clusters
postgresql_server_ssl_ciphers: 'ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH'

# Default startup behaviour: auto, manual, disabled
postgresql_server_start_conf: 'auto'

# Percentage of maximum shared memory segment to use for shared buffer
# calculations
postgresql_server_shmmax_limiter: '0.8'

# Percentage of available RAM to use for shared buffer calculations, in case
# that maximum shared buffers are not defined correctly
postgresql_server_shm_memory_limiter: '0.4'

# List of IP addresses on which PostgreSQL clusters will listen for TCP
# connections by default.
postgresql_server_listen_addresses: [ 'localhost' ]

# Default maximum number of connections
postgresql_server_max_connections: '100'

# Default WAL and archivisation settings
# Options: minimal, archive, hot_standby
postgresql_server_wal_level: 'minimal'
postgresql_server_archive_command: ''

# Host Based Authentication - system accounts
postgresql_server_hba_system:

  - comment:  'Database superuser account, do not disable'
    type:     'local'
    database: 'all'
    user:     '*postgres*'
    method:   'peer'
    options:  'map=system'

  - comment:  'Block remote connections to admin account'
    type:     'host'
    database: 'all'
    user:     '*postgres*'
    address:  'all'
    method:   'reject'

# Host Based Authentication - replication connections
postgresql_server_hba_replication:

  - comment:  'Remote replication connections'
    type:     'hostssl'
    database: 'replication'
    user:     'replication'
    address:  'samenet'
    method:   'md5'

# Host Based Authentication - public connections to ``postgres``, needed by
# some applications
postgresql_server_hba_public:

  - comment:  'Allow public connections to postgres database'
    type:     'local'
    database: 'postgres'
    user:     'all'
    method:   'md5'

  - comment:  'Allow public connections to postgres database'
    type:     'hostssl'
    database: 'postgres'
    user:     'all'
    address:  'samenet'
    method:   'md5'

# Host Based Authentication - trusted connections from localhost
postgresql_server_hba_trusted:

  - comment:  'Access through local UNIX socket'
    type:     'local'
    database: 'samerole'
    user:     '@trusted'
    method:   'peer'

# Host Based Authentication - connections from localhost
postgresql_server_hba_local:

  - comment:  'Access through local UNIX socket with password'
    type:     'local'
    database: 'samerole'
    user:     'all'
    method:   'md5'

  - comment:  'Access from localhost'
    type:     'host'
    database: 'samerole'
    user:     'all'
    address:  'localhost'
    method:   'md5'

# Host Based Authentication - remote connections
postgresql_server_hba_remote:

  - comment:  'Remote connections from local networks'
    type:     'hostssl'
    database: 'samerole'
    user:     'all'
    address:  'samenet'
    method:   'md5'

# UNIX account to PostgreSQL role mapping - 'system' map
postgresql_server_ident_system:

  - map:  'system'
    user: '{{ postgresql_server_admins }}'
    role: '*postgres*'

# UNIX account to PostgreSQL role mapping - 'trusted' map
postgresql_server_ident_trusted: []

# UNIX account to PostgreSQL role mapping - 'local' map
postgresql_server_ident_local: []

# List of PostgreSQL clusters to manage. Each entry should have at least
# a name and a port on which to bind the cluster. Other options listed below
# are optional. You can also add all PG parameters from postgresql.conf to
# a cluster entry
postgresql_server_clusters: [ '{{ postgresql_server_cluster_main }}' ]

# Configuration for default "main" cluster
postgresql_server_cluster_main:
  name: 'main'
  port: '5432'

  # Parameters below are optional. More parameters can be found in postgresql.conf template
  #user: 'postgres'
  #group: 'postgres'
  #admin_password: "{{ lookup('password', secret + '/credentials/' + ansible_fqdn + '/postgresql/9.1/main/postgres/password length=20') }}"
  #version:  '{{ postgresql_server_version }}'
  #pki_path: ''
  #pki_realm: ''
  #pki_ca: ''
  #pki_crt: ''
  #pki_key: ''
  #start_conf: 'auto'
  #environment:
  #  VARIABLE: 'value'
  #listen_addresses: [ 'localhost', '*', '0.0.0.0', '::' ]
  #hba_replication: False
  #hba_public: False
  #hba_trusted: False
  #hba_local: False
  #hba_remote: False
  #hba:
  #  - comment:  'Example entry'
  #    type:     'host'
  #    database: [ 'db1', 'db2' ]
  #    user:     [ 'all' ]
  #    address:  [ '192.0.2.0/24', '2001:db8::/32' ]
  #    hosts:    [ 'inventory_host1', 'inventory_host2' ]
  #    method:   'md5'
  #    options:  [ 'option', 'key=value' ]
  #    state:    'absent'
  #ident_trusted: False
  #ident_local: False
  #ident:
  #  - map: 'map-name'
  #    user: [ 'user1', 'user2' ]
  #    role: [ 'rolename' ]
  #trusted: []
  #allow:
  #  - '10.0.0.0/8'
  #  - '172.16.0.0/12'
  #  - '192.168.0.0/16'


# ---- Auto backups ----

# Backups will be ran daily and are rotated weekly.
# Weekly backups are rotated on a 5 week cycle.
# Monthly backups are ran on the first of the month.
# Monthly backups are not rotated.
#   It would be a good idea to move monthly backups to a remote server yourself.

# Enable AutoPostgreSQLBackup support for local database snapshots
postgresql_server_autopostgresqlbackup: True

# Should auto backups be enabled for a given cluster?
# If set to False, the script will be removed from /etc/cron.daily.
postgresql_server_auto_backup: True

postgresql_server_auto_backup_dir: '/var/lib/autopostgresqlbackup'

# Available options:
#   - log    : send only the log file
#   - files  : send the log file and sql files as attachments
#   - stdout : output the log to the screen if run manually
#   - quiet : only send logs if an error occurs
postgresql_server_auto_backup_mail: 'quiet'

# The maximum allowed size of the e-mail, 4000 = about 5mb.
postgresql_server_auto_backup_mail_size: 4000

# Who should receive the backup files?
postgresql_server_auto_backup_mail_to: 'backup@{{ ansible_domain }}'

# Include create database in the backup?
postgresql_server_auto_backup_create_database: True

# Use a separate backup directory and file for each database?
postgresql_server_auto_backup_isolate_databases: True

# Which day of the week do you want to perform weekly backups?
# 1 = Monday , ... , 7 = Sunday.
postgresql_server_auto_backup_weekly: '6'

# Should the dumps be encrypted?
postgresql_server_auto_backup_encryption: False
postgresql_server_auto_backup_encryption_key: ''

# Scripts to execute before and/or after the backup takes place.
# An empty value disables this feature, provide a path to the script to enable.
postgresql_server_auto_backup_pre_script: ''
postgresql_server_auto_backup_post_script: ''

postgresql_server_auto_backup_compression: 'gzip'
postgresql_server_auto_backup_encryption_cipher: 'aes256'
postgresql_server_auto_backup_encryption_suffix: '.enc'

