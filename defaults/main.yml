---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# --------------------
#   OpenSSH packages
# --------------------

# .. envvar:: sshd_base_packages
#
# List of base packages that should be installed for OpenSSH support.
sshd_base_packages: [ 'openssh-server', 'openssh-client',
                      'openssh-blacklist', 'openssh-blacklist-extra',
                      'molly-guard' ]

# .. envvar:: sshd_packages
#
# List of additional packages to install.
sshd_packages: []



# Separate list of IP addresses or CIDR networks which should be allowed to
# access SSH service. This list is not bound to any restrictions if any entries
# are set.
sshd_whitelist: []
sshd_group_whitelist: []
sshd_host_whitelist: []

# List of IP addresses or CIDR networks to allow access to SSH without
# restrictions. If this list is set, other IP addresses or networks will have
# limited access.
# They will be configured in iptables (via ferm) and /etc/hosts.allow (via
# tcpwrappers).
sshd_allow: []
sshd_group_allow: []
sshd_host_allow: []

# Allow connections from all hosts in TCPWrappers by default if list of hosts
# is not specified
sshd_tcpwrappers_default: 'ALL'

# Enable or disable limited SSH access from all hosts in ip(6)tables. Recent
# new connections are filtered and when too many new connections are created in
# specified time window, host is added to the recent blocklist
sshd_ferm_limit: 'true'

# Length of the time window used by firewall to catch new offenders,
# by default 5 minutes
sshd_ferm_limit_seconds: '{{ (60 * 5) }}'

# How many new connections to allow in above time window
sshd_ferm_limit_hits: '8'

# Name of the iptables recent list where offenders will be added
sshd_ferm_limit_destination: 'badguys'


# .. envvar:: sshd_ferm_ports
#
# List of TCP ports to open in the firewall for SSH connections. You can use
# port numbers or service names from ``/etc/services``.
sshd_ferm_ports: [ 'ssh' ]


# --------------------------------
#   OpenSSH server configuration
# --------------------------------

# .. envvar:: sshd_ports
#
# List of ports which ``sshd`` will listen on.
sshd_ports: [ '22' ]


# .. envvar:: sshd_listen
#
# List of IP addresses on which ``sshd`` should listen for new connections. If
# it's empty, ``sshd`` listens on all interfaces.
sshd_listen: []


# .. envvar:: sshd_host_keys
#
# List of SSH host keys that should be enabled, in order of preference.
sshd_host_keys: [ 'ed25519', 'rsa', 'ecdsa' ]


# .. envvar:: sshd_banner
#
# Path to file which should be displayed before user authentication.
sshd_banner: 'none'


# .. envvar:: sshd_log_level
#
# How much information should be logged by ``sshd`` server.
sshd_log_level: 'INFO'


# .. envvar:: sshd_permit_root_login
#
# Specify if access to ``root`` account should be granted. By default ``root``
# can be accessed only using SSH public keys.
sshd_permit_root_login: 'without-password'

# ---- System-wide host SSH fingerprints ----

# Lists of hosts to scan for SSH fingerprints (global, for a group of hosts and
# for specific hosts)
# .. envvar:: sshd_password_authentication
#
# Enable or disable password authentication.
sshd_password_authentication: 'no'


# .. envvar:: sshd_x11_forwarding
#
# Enable or disable X11 forwarding by the server.
sshd_x11_forwarding: 'no'


# .. envvar:: sshd_max_auth_tries
#
# Maximum number of failed authentication attempts allowed by the server.
sshd_max_auth_tries: '4'


# .. envvar:: sshd_max_startups
#
# Maximum number of unauthenticated connections (3), after which there's 80%
# probability of next unauthenticated connection to be dropped, finishing at 7,
# after which all new unauthenticated connections will be refused.
sshd_max_startups: '3:80:7'


# .. envvar:: sshd_login_grace_time
#
# Time after which unauthenticated sessions are disconnected.
sshd_login_grace_time: '20s'


# .. envvar:: sshd_privilege_separation
#
# Specify if ``sshd`` should use unprivileged processes for incoming session
# authentication. Setting this to ``sandbox`` enables use of additional
# kernel restrictions.
sshd_privilege_separation: 'sandbox'


# ------------------------------
#   Group-based access control
# ------------------------------

# .. envvar:: sshd_allow_groups
#
# List of UNIX groups which allow connections to SSH service (global).
sshd_allow_groups: [ 'root', 'admins', 'sshusers', 'sftponly' ]


# .. envvar:: sshd_group_allow_groups
#
# List of UNIX groups which allow connections to SSH service (host group).
sshd_group_allow_groups: []


# .. envvar:: sshd_host_allow_groups
#
# List of UNIX groups which allow connections to SSH service (host).
sshd_host_allow_groups: []


# ------------------------------
#   Authorized keys management
# ------------------------------

# .. envvar:: sshd_authorized_keys
#
# List of files which contain SSH public keys, to be used to authenticate
# remote users.
sshd_authorized_keys: '{{ sshd_authorized_keys_system +
                          sshd_authorized_keys_user }}'


# .. envvar:: sshd_authorized_keys_system
#
# List of system-wide files countaining SSH public keys. These files are
# expeted to be maintained by system administrator and might be used in
# restricted environments (for example SFTPonly accounts).
sshd_authorized_keys_system:
  - '/etc/ssh/authorized_keys/%u'


# .. envvar:: sshd_authorized_keys_user
#
# List of user files containing SSH public keys. These files are maintained by
# the users themselves.
sshd_authorized_keys_user:
  - '%h/.ssh/authorized_keys'
  - '%h/.ssh/authorized_keys2'


sshd_known_hosts: []
sshd_group_known_hosts: []
sshd_host_known_hosts: []

# Command used to scan host fingerprints
sshd_known_hosts_command: 'ssh-keyscan -H -T 10'

# System-wide file where SSH fingerprints are stored
sshd_known_hosts_file: '/etc/ssh/ssh_known_hosts'

# ---- Other options ----
# Additional options added in /etc/ssh/sshd_config, in text block format.

# Added at the begin of the configuration.
# Openssh reads its configuration form top to bottom and uses the first match for a keyword that it finds.
# So options set in sshd_config_options_begin will be used instead of options which follow after sshd_config_options_begin.
sshd_config_options_begin: |
  MaxAuthTries 3

# Tips: you can use 'Match LocalPort' to create separate configurations for
# sshd listening on different ports
sshd_config_options_end: False

# -------------------------
#   Encryption parameters
# -------------------------

# .. envvar:: sshd_ciphers_map
#
# Dict with list of ciphers which should be used by the ``sshd`` server,
# depending on available version, ordered from newest to oldest. Newer version
# supersedes older version.
sshd_ciphers_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'chacha20-poly1305@openssh.com', 'aes256-gcm@openssh.com',
           'aes128-gcm@openssh.com', 'aes256-ctr', 'aes192-ctr',
           'aes128-ctr' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'aes256-ctr', 'aes192-ctr', 'aes128-ctr' ]


# .. envvar:: sshd_kex_algorithms_map
#
# Dict with list of key exchange algorithms which should be used by the
# ``sshd`` server, depending on available version, ordered from newest to
# oldest. Newer version supersedes older version.
sshd_kex_algorithms_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'curve25519-sha256@libssh.org', 'ecdh-sha2-nistp521',
           'ecdh-sha2-nistp384', 'ecdh-sha2-nistp256',
           'diffie-hellman-group-exchange-sha256' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'diffie-hellman-group-exchange-sha256' ]


# .. envvar:: sshd_macs_map
#
# Dict with list of message authentication code algorithms which should be used
# by the ``sshd`` server, depending on available version, ordered from newest
# to oldest. Newer version supersedes older version.
sshd_macs_map:

  # Source: https://wiki.mozilla.org/Security/Guidelines/OpenSSH
  '6.5': [ 'hmac-sha2-512-etm@openssh.com', 'hmac-sha2-256-etm@openssh.com',
           'umac-128-etm@openssh.com', 'hmac-sha2-512', 'hmac-sha2-256',
           'umac-128@openssh.com' ]

  # Source: https://xivilization.net/~marek/blog/2015/01/12/secure-secure-shell-on-debian-wheezy/
  '6.0': [ 'hmac-sha2-512', 'hmac-sha2-256' , 'hmac-ripemd160' ]


