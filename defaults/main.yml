---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# .. Role maintainer note:
# .. The official ownCloud documentation is also written is RST.
# .. https://github.com/owncloud/documentation/tree/master/admin_manual
#
# .. System packages [[[
#
# -------------------
#   System packages
# -------------------

# .. envvar:: owncloud_base_packages
#
# List of base packages required by ownCloud.
owncloud_base_packages:
  - 'owncloud'

# .. ]]]

# .. Basic options [[[
#
# -----------------
#   Basic options
# -----------------

# .. envvar:: owncloud_domain
#
# Domain that will be configured for the ownCloud instance.
owncloud_domain: [ 'owncloud.{{ ansible_domain }}' ]

# .. ]]]

# .. ownCloud source and deployment [[[
#
# ----------------------------------
#   ownCloud source and deployment
# ----------------------------------

# .. envvar:: owncloud_edition
#
# FIXME
# Refer to http://download.opensuse.org/repositories/isv:/ownCloud:/ to see
# which are available.
owncloud_edition: 'community'


# .. envvar:: owncloud_release
#
# ownCloud version in the format ``major_release.minor_release`` or ``testing``.
# See http://download.opensuse.org/repositories/isv:/ownCloud:/community:/ for the full list.
owncloud_release: '9.0'


# .. envvar:: owncloud_distribution
#
# Name and version of OS distribution to use for ownCloud packages.
owncloud_distribution: '{{ owncloud_distribution_name + "_" +
                           owncloud_distribution_version }}'


# .. envvar:: owncloud_distribution_name
#
# Name of the OS distribution to use for ownCloud URLs.
owncloud_distribution_name: '{{ ansible_distribution }}'


# .. envvar:: owncloud_distribution_version
#
# Version number of the OS distribution for ownCloud URLs.
owncloud_distribution_version: '{{ ((ansible_distribution_major_version + ".0")
                                    if ansible_distribution in [ "Debian" ]
                                    else ansible_distribution_version) }}'


# .. envvar:: owncloud_apt_repo_base
#
# Base APT repository URL.
owncloud_apt_repo_base: 'http://download.owncloud.org/download/repositories/stable'


# .. envvar:: owncloud_apt_repo_key_id
#
# GPG fingerprint for the public key used to sign the APT repository.
owncloud_apt_repo_key_id: 'BCECA90325B072AB1245F739AB7C32C35180350A'


# .. envvar:: owncloud_apt_repo_key_url
#
# URL of the GPG keys used by the ownCloud project.
owncloud_apt_repo_key_url: '{{ owncloud_apt_repo_base + "/" +
                               owncloud_distribution + "/"
                               "Release.key" }}'


# .. envvar:: owncloud_apt_repo_source
#
# APT ``sources.list`` URL of the ownCloud ``.deb`` repository.
owncloud_apt_repo_source: '{{ "deb " + owncloud_apt_repo_base + "/" +
                              owncloud_distribution + "/ /" }}'


# .. envvar:: owncloud_user
#
# User that will be used for the ownCloud instance.
owncloud_user: 'www-data'


# .. envvar:: owncloud_group
#
# Group that will be used for the ownCloud instance.
owncloud_group: 'www-data'


# .. envvar:: owncloud_home
#
# Directory under which ownCloud will be installed.
owncloud_home: '/var/www/owncloud'


# .. envvar:: owncloud_data_path
#
# Path where ownCloud data directory and files are stored.
owncloud_data_path: '{{ owncloud_home }}/data'


# .. envvar:: owncloud_deploy_path
#
# Where the ownCloud instance will be deployed (web root).
owncloud_deploy_path: '{{ owncloud_home }}'

# .. ]]]

# .. Database configuration [[[
#
# --------------------------
#   Database configuration
# --------------------------

# .. envvar:: owncloud_database
#
# ownCloud recommends MySQL or MariaDB as database. Set to ``False`` to use SQLite.
# https://doc.owncloud.org/server/8.1/admin_manual/configuration_database/linux_database_configuration.html#database-configuration
# Choices see ``owncloud_database_map``.
owncloud_database: 'mariadb'


# .. envvar:: owncloud_database_server
#
# FQDN of the database server. It will be configured by
# the ``debops.mariadb`` or ``debops.postgresql`` role.
owncloud_database_server: "{{ ansible_local[owncloud_database].server }}"


# .. envvar:: owncloud_database_port
#
# Port database is listening on.
owncloud_database_port: "{{ ansible_local[owncloud_database].port }}"


# .. envvar:: owncloud_database_user
#
# Database user to use for ownCloud.
owncloud_database_user: 'owncloud'


# .. envvar:: owncloud_database_name
#
# Name of the database to use for ownCloud.
owncloud_database_name: 'owncloud'


# .. envvar:: owncloud_database_password_path
#
# Path to database password file.
owncloud_database_password_path: "{{ secret + '/' + owncloud_database + '/' +
                                     ansible_local[owncloud_database].delegate_to }}{%
                                       if owncloud_database=='postgresql' %}/{{ ansible_local[owncloud_database].port }}{% endif
                                     %}{{ '/credentials/' + owncloud_database_user +
                                     '/password' }}"


# .. envvar:: owncloud_database_password
#
# Database password for ownCloud.
owncloud_database_password: '{{ lookup("password", owncloud_database_password_path + " length=48") }}'


# .. envvar:: owncloud_database_map
#
owncloud_database_map:

  # MySQL/MariaDB database.
  mariadb:
    dbtype: 'mysql'
    dbname: '{{ owncloud_database_name|d(owncloud_user) }}'
    dbuser: '{{ owncloud_database_user|d(owncloud_user) }}'
    dbpass: '{{ owncloud_database_password }}'
    dbhost: '{{ owncloud_database_server|d("localhost") }}'
    dbtableprefix: ''

  # PostgreSQL database on localhost, connection through Unix socket, no default password.
  postgresql:
    dbtype: 'pgsql'
    dbname: '{{ owncloud_database_name|d(owncloud_user) }}'
    dbuser: '{{ owncloud_database_user|d(owncloud_user) }}'
    dbpass: ''
    dbhost: '{{ owncloud_database_server|d("/var/run/postgresql") }}'
    dbtableprefix: ''

  sqlite:
    dbtype: 'sqlite'

# .. ]]]

# .. ownCloud admin login/password [[[
#
# ---------------------------------
#   ownCloud admin login/password
# ---------------------------------

# .. envvar:: owncloud_admin_username
#
# Default admin username, in the form 'admin-$USER'.
# Set to ``False`` to disable automatic username and password.
owncloud_admin_username: 'admin-{{ lookup("env","USER") }}'


# .. envvar:: owncloud_admin_password_path
#
# Path to database password file.
owncloud_admin_password_path: '{{ secret + "/credentials/" + ansible_fqdn +
                                  "/owncloud/admin/" + owncloud_admin_username +
                                  "/password" }}'


# .. envvar:: owncloud_password_length
#
# Length of randomly generated admin password.
owncloud_password_length: 20


# .. envvar:: owncloud_admin_password
#
# Default admin password.
# A random password will be generate by default as documented by the ``debops.secret`` role.
owncloud_admin_password: '{{ lookup("password",
                             owncloud_admin_password_path + " length=" + (owncloud_password_length|string)) }}'


# .. envvar:: owncloud_autosetup
#
# Should Ansible automatically open the ownCloud page to finish the setup on
# it's own? Disabled if admin_username is set to ``False`` and done only
# if the config-files are generated in the same run.
# Important: For this to work, name resolution has to be set up when this role
# is executed.
owncloud_autosetup: True


# .. envvar:: owncloud_autosetup_url
#
# URL which will be called to finish autosetup.
# FIXME
owncloud_autosetup_url: 'http://{{ owncloud_domain[0] }}/index.php'

# .. ]]]

# .. ownCloud configuration [[[
#
# --------------------------
#   ownCloud configuration
# --------------------------

# .. envvar:: owncloud_enable_apc_cli
#
# Enable APC in PHP CLI. Setting this to ``True`` is only needed when you want to
# use the :command:`occ` command and use ``\OC\Memcache\APCu`` as memcache.
# See https://github.com/owncloud/core/issues/17329
owncloud_enable_apc_cli: False


# .. envvar:: owncloud_upload_size
#
# Max upload size set in nginx and php5, with amount as M or G
owncloud_upload_size: '128M'


# .. envvar:: owncloud_php5_output_buffering
#
# Output buffering set in php5, with amount set in megabytes
# Setting according to:
# https://doc.owncloud.org/server/8.0/admin_manual/configuration_files/big_file_upload_configuration.html#configuring-php
owncloud_php5_output_buffering: '0'


# .. envvar:: owncloud_php5_max_children
#
# Max children processes to run in php5-fpm
owncloud_php5_max_children: '50'


# .. envvar:: owncloud_cron_minute
#
# At what time cron should execute background jobs
owncloud_cron_minute: '*/15'


# .. envvar:: owncloud_initial_config_global
#
# Initial configuration for ownCloud.
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/config_sample_php_parameters.html>`__ for details.
owncloud_initial_config_global:
  ## The default timezone for logfiles is UTC.
  logtimezone: '{{ ansible_local.timezone if (ansible_local|d() and ansible_local.timezone|d()) else "Etc/UTC" }}'

  ## Loglevel to start logging at. Valid values are: 0 = Debug, 1 = Info,
  ##  2 = Warning, 3 = Error, and 4 = Fatal. The default value is Warning.
  loglevel: 2

  ## ISO 8601 datetime: 2004-02-12T15:19:21+00:00
  logdateformat: 'Y-m-d H:i:s.u'

  ## https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/config_sample_php_parameters.html#deleted-items-trash-bin
  trashbin_auto_expire: True
  trashbin_retention_obligation: 30

  remember_login_cookie_lifetime: '{{ 60*60*24*15 }}'
  session_lifetime: '{{ 60 * 60 * 24 }}'
  session_keepalive: True


# .. envvar:: owncloud_initial_config_group
#
# See ``owncloud_initial_config_global``.
owncloud_initial_config_group: {}


# .. envvar:: owncloud_initial_config
#
# See ``owncloud_initial_config_global``.
owncloud_initial_config: {}


# .. envvar:: owncloud_timeout
#
# Timeouts in seconds used for the following settings:
#
# - ``fastcgi_read_timeout`` in the nginx configuration.
# - ``max_input_time`` in php5-fpm.
# - ``max_execution_time`` in php5-fpm.
#
# If you need to handle very large files you should increase this value.
owncloud_timeout: 300

# .. ]]]

# .. ownCloud configuration via occ commands [[[
#
# -------------------------------------------
#   ownCloud configuration via occ commands
# -------------------------------------------

# .. envvar:: owncloud_run_occ_global_commands
#
# Global list of :command:`occ` commands to run.
# It can be used to enable apps, add users and more which can be useful when
# deploying ownCloud.
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/occ_command.html>`__ for details.
#
# Examples::
#
#   owncloud_run_occ_global_commands
#
#     ## Requires: php5-ldap
#     - command: 'app:enable user_ldap'
#
#     - command: 'app:enable external'
#
#     ## Requires: php5-libsmbclient
#     - command: 'app:enable files_external'
#
#     ## Create an additional admin account.
#     - command: 'user:add --password-from-env --display-name="Administrator" --group="admin" admin'
#       ## Does not work with ownCloud 8.0 or below so don’t run it there.
#       when: '{{ owncloud_release | version_compare("8.1", ">=") }}'
#       env:
#         OC_PASS: "{{ lookup('password', secret + '/credentials/' +
#                      ansible_fqdn + '/owncloud/admin/' + 'admin' +
#                      '/password length=' + owncloud_password_length) }}"
#
#     ## Create an regular user. Note that you probably want to use an existing
#     ## user database like LDAP.
#     - command: 'user:add --password-from-env --display-name="Normal user" user'
#       when: '{{ owncloud_release | version_compare("8.1", ">=") }}'
#       env:
#         OC_PASS: "{{ lookup('password', secret + '/credentials/' +
#                      ansible_fqdn + '/owncloud/users/' + 'user' +
#                      '/password length=' + owncloud_password_length) }}"
#
owncloud_run_occ_global_commands:
  ## Disable the updater because it does not work anyway with the way ownCloud
  ## is setup by this role using packages.
  ## Since ownCloud 9 it is called `updatenotification`.
  ## FIXME: Validate.
  - command: 'app:disable updater'
    when: '{{ owncloud_release | version_compare("8.2", "<=") }}'


# .. envvar:: owncloud_run_occ_group_commands
#
# See ``owncloud_run_occ_global_commands``.
owncloud_run_occ_group_commands: []


# .. envvar:: owncloud_run_occ_host_commands
#
# See ``owncloud_run_occ_global_commands``.
owncloud_run_occ_host_commands: []

# .. ]]]

# .. LDAP authentication [[[
#
# -----------------------
#   LDAP authentication
# -----------------------
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/go.php?to=admin-ldap>`__ for details.

# .. envvar:: owncloud_ldap_enable
#
# Enable LDAP support. ownCloud support multiple LDAP servers but this role
# configures only default one. If you need something more complex you can
# use ``owncloud_run_occ_global_commands``.
owncloud_ldap_enable: False


# .. envvar:: owncloud_ldap_create_user
#
# Should the ``owncloud_ldap_binddn`` LDAP user be created if it does not exist?
owncloud_ldap_create_user: True


# .. envvar:: owncloud_ldap_domain
#
# Domain name used to generate base DN.
owncloud_ldap_domain: '{{ ansible_domain }}'


# .. envvar:: owncloud_ldap_basedn
#
# Base DN
owncloud_ldap_basedn: '{{ "dc=" + owncloud_ldap_domain.split(".") | join(",dc=") }}'


# .. envvar:: owncloud_ldap_binddn
#
# DN to bind as
owncloud_ldap_binddn: '{{ "cn=owncloud," + secret_ldap_services_dn }}'


# .. envvar:: owncloud_ldap_host
#
owncloud_ldap_host: 'ldap.{{ ansible_domain }}'


# .. envvar:: owncloud_ldap_password_file
#
owncloud_ldap_password_file: '{{ secret + "/credentials/" + owncloud_ldap_host + "/slapd/" + owncloud_ldap_basedn + "/" + owncloud_ldap_binddn + ".password" }}'


# .. envvar:: owncloud_ldap_password
#
owncloud_ldap_password: '{{ lookup("password", owncloud_ldap_password_file) }}'


# .. envvar:: owncloud_ldap_port
#
owncloud_ldap_port: '636'


# .. envvar:: owncloud_ldap_method
#
owncloud_ldap_method: 'ssl'


# .. envvar:: owncloud_ldap_user_display_name
#
# The attribute that should be used as display name in ownCloud.
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#directory-settings>`__ for details.
#
# Example for a Microsoft Windows environment::
#
#    owncloud_ldap_user_display_name: 'sAMAccountName'
#
# FIXME
owncloud_ldap_user_display_name: 'cn'


# .. envvar:: owncloud_ldap_user_filter
#
# Use this to control which LDAP users are listed as ownCloud users on your ownCloud server.
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#user-filter>`__ for details.
owncloud_ldap_user_filter: '(|(objectclass=inetOrgPerson))'


# .. envvar:: owncloud_ldap_user_filter_objectclass
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#user-filter>`__ for details.
owncloud_ldap_user_filter_objectclass: 'inetOrgPerson'


# .. envvar:: owncloud_ldap_group_filter
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#group-filter>`__ for details.
owncloud_ldap_group_filter: '(&(|(objectclass=posixGroup)))'


# .. envvar:: owncloud_ldap_group_filter_groups
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#group-filter>`__ for details.
owncloud_ldap_group_filter_groups: ''


# .. envvar:: owncloud_ldap_group_filter_objectclass
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#group-filter>`__ for details.
owncloud_ldap_group_filter_objectclass: 'posixGroup'


# .. envvar:: owncloud_ldap_login_filter
#
# The settings in the Login Filter tab determine which LDAP users can log in to your ownCloud system.
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#login-filter>`__ for details.
owncloud_ldap_login_filter: '(&(|(objectclass=inetOrgPerson))(uid=%uid))'


# .. envvar:: owncloud_ldap_login_filter_attributes
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#login-filter>`__ for details.
owncloud_ldap_login_filter_attributes: ''


# .. envvar:: owncloud_ldap_group_assoc_attribute
#
# Attribute which ownCloud uses to match members of the group.
#
# Possible values:
#
# ``memberUid``
#   Useful for OpenLDAP with PosixGroups. Attribute contains only UID of the user.
#
# ``uniqueMember``
#   Attribute contains full DN of the user.
#
# ``member``
#   FIXME
#   Attribute contains full DN of the user.
#
owncloud_ldap_group_assoc_attribute: 'memberUid'


# .. envvar:: owncloud_home_folder_naming_rule
#
# By default, the ownCloud server creates the user directory in your ownCloud data directory and gives it the ownCloud username, .e.g :file:`/var/www/owncloud/data/alice`. You may want to override this setting and name it after an LDAP attribute value. The attribute can also return an absolute path, e.g. :file:`/mnt/storage43/alice`. Leave it empty for default behavior.
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#special-attributes>`__ for details.
owncloud_home_folder_naming_rule: 'attr:uid'

# .. Advanced settings [[[
#
# ~~~~~~~~~~~~~~~~~~~~~
#   Advanced settings
# ~~~~~~~~~~~~~~~~~~~~~

# .. envvar:: owncloud_ldap_cache_ttl
#
# A cache is introduced to avoid unnecessary LDAP traffic, for example caching usernames so they don’t have to be looked up for every page, and speeding up loading of the Users page. Saving the configuration empties the cache. The time is given in seconds.
#
# Note that almost every PHP request requires a new connection to the LDAP server. If you require fresh PHP requests we recommend defining a minimum lifetime of 15s or so, rather than completely eliminating the cache.
#
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_user/user_auth_ldap.html#caching>`__ for details.
owncloud_ldap_cache_ttl: '600'

# .. ]]]

# .. Expert settings [[[
#
# ~~~~~~~~~~~~~~~~~~~
#   Expert settings
# ~~~~~~~~~~~~~~~~~~~

# .. envvar:: owncloud_ldap_expert_username_attr
#
# The internal username is the identifier in ownCloud for LDAP users. By
# default it will be created from the UUID attribute. The UUID attribute
# ensures that the username is unique, and that characters do not need to be
# converted. Only these characters are allowed: :regexp:`[a-zA-Z0-9_.@-]`.
# Other characters are replaced with their ASCII equivalents, or are simply
# omitted.
#
# The LDAP backend ensures that there are no duplicate internal usernames in
# ownCloud, i.e. that it is checking all other activated user backends
# (including local ownCloud users). On collisions a random number (between 1000
# and 9999) will be attached to the retrieved value. For example, if ``alice``
# exists, the next username may be ``alice_1337``.
#
# The internal username is the default name for the user home folder in
# ownCloud. It is also a part of remote URLs, for instance for all DAV
# services.
#
# You can override all of this with the Internal Username setting. Leave it
# empty for default behaviour. Changes will affect only newly mapped LDAP
# users.
#
# You will need to add this variable yourself to ``owncloud_ldap_conf_map``
# right now.
#
# Settings this to::
#
#    owncloud_ldap_expert_username_attr: 'sAMAccountName'
#
# FIXME: Needs testing.
#
owncloud_ldap_expert_username_attr: ''

# .. ]]]

# .. envvar:: owncloud_ldap_conf_map
#
owncloud_ldap_conf_map:
  ldapHost: '{{ "ldaps://" if (owncloud_ldap_method == "ssl") else "" }}{{ owncloud_ldap_host }}'
  ldapPort: '{{ owncloud_ldap_port }}'
  ldapAgentName: '{{ owncloud_ldap_binddn }}'
  ldapBase: '{{ owncloud_ldap_basedn }}'
  ldapEmailAttribute: 'mail'
  ldapConfigurationActive: '1'
  ldapUserDisplayName: '{{ owncloud_ldap_user_display_name }}'
  ldapUserFilter: '{{ owncloud_ldap_user_filter }}'
  ldapUserFilterObjectclass: '{{ owncloud_ldap_user_filter_objectclass }}'
  ldapLoginFilter: '{{ owncloud_ldap_login_filter }}'
  ldapLoginFilterAttributes: '{{ owncloud_ldap_login_filter_attributes }}'
  ldapGroupFilter: '{{ owncloud_ldap_group_filter }}'
  ldapGroupFilterGroups: '{{ owncloud_ldap_group_filter_groups }}'
  ldapGroupFilterObjectclass: '{{ owncloud_ldap_group_filter_objectclass }}'
  ldapGroupMemberAssocAttr:  '{{ owncloud_ldap_group_assoc_attribute }}'
  homeFolderNamingRule: '{{ owncloud_home_folder_naming_rule }}'
  ldapCacheTTL: '{{ owncloud_ldap_cache_ttl }}'

# .. ]]]

# .. ownCloud Mail configuration [[[
#
# -------------------------------
#   ownCloud Mail configuration
# -------------------------------
#
# Refer to the `official ownCloud Dokumentation about config.php <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/config_sample_php_parameters.html#mail-parameters>`__ and the `official ownCloud Dokumentation about email configuration <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/email_configuration.html>`__ for details.

# .. envvar:: owncloud_mail_domain
#
owncloud_mail_domain: '{{ ansible_domain }}'


# .. envvar:: owncloud_mail_from_address
#
# From address that overrides the built-in ``sharing-noreply`` and
# ``lostpassword-noreply`` from addresses.
owncloud_mail_from_address: 'owncloud'


# .. envvar:: owncloud_mail_smtpmode
#
# Which mode to use for sending mail.
# Choices are: ``sendmail``, ``smtp``, ``qmail`` or ``php``.
owncloud_mail_smtpmode: 'sendmail'


# .. envvar:: owncloud_mail_smtphost
#
# Specify the IP address of your mail server host.
# This may contain multiple
# hosts separated by a semi-colon. If you need to specify the port number
# append it to the IP address separated by a colon, like this: 127.0.0.1:24.
# This depends on ``owncloud_mail_smtpmode``.
owncloud_mail_smtphost: ''


# .. envvar:: owncloud_mail_smtpport
#
# Port for sending mail. Can also be specified via ``owncloud_mail_smtphost``.
# This depends on ``owncloud_mail_smtpmode``.
owncloud_mail_smtpport: ''


# .. envvar:: owncloud_mail_conf_map
#
owncloud_mail_conf_map:
  mail_domain: '{{ owncloud_mail_domain }}'
  mail_from_address: '{{ owncloud_mail_from_address  }}'
  mail_smtpmode: '{{ owncloud_mail_smtpmode }}'

## FIXME: Needs testing.
  # mail_smtphost: '{{ owncloud_mail_smtphost }}'
  # mail_smtpport: '{{ owncloud_mail_smtpport }}'

# .. ]]]

# .. ownCloud custom config.php configuration [[[

# --------------------------------------------
#   ownCloud custom config.php configuration
# --------------------------------------------

# .. envvar:: owncloud_custom_conf_map
#
# This parameters ends up in :file:`custom.config.php` and override the values
# from :file:`config.php`.
# This variable is intended to be used in Ansible's global inventory.
# Refer to the `official ownCloud Dokumentation <https://doc.owncloud.org/server/9.0/admin_manual/configuration_server/config_sample_php_parameters.html>`__ for details.
#
# Note: Parameters with \ (backslash) needs double escaping::
#
#    owncloud_custom_conf_map:
#      memcache.local: '\\OC\\Memcache\\APCu'
#
owncloud_custom_conf_map: {}


# .. envvar:: owncloud_custom_group_conf_map
#
# This parameters ends up in :file:`custom.config.php` and override the values
# from :file:`config.php`.
# This variable is intended to be used in one Ansible host group inventory.
# Refer to ``owncloud_custom_conf_map`` for details.
owncloud_custom_group_conf_map: {}


# .. envvar:: owncloud_custom_host_conf_map
#
# This parameters ends up in :file:`custom.config.php` and override the values
# from :file:`config.php`.
# This variable is intended to be used in Ansible host inventory.
# Refer to ``owncloud_custom_conf_map`` for details.
owncloud_custom_host_conf_map: {}

# .. ]]]

# .. Role-dependent configuration [[[
#
# --------------------------------
#   Role-dependent configuration
# --------------------------------

# .. envvar:: owncloud__nginx__servers
#
# List of :program:`nginx` server configurations managed by the
# ``debops.nginx`` role.
owncloud__nginx__servers:

  - by_role: 'debops.owncloud'
    enabled: True
    default: False
    type: 'php5'
    name: '{{ owncloud_domain }}'
    root: '{{ owncloud_deploy_path }}'

    options: |
      client_max_body_size  {{ owncloud_upload_size }};
      fastcgi_buffers       64              4K;
      rewrite               ^/caldav(.*)$   /remote.php/caldav$1   redirect;
      rewrite               ^/carddav(.*)$  /remote.php/carddav$1  redirect;
      rewrite               ^/webdav(.*)$   /remote.php/webdav$1   redirect;
      error_page            403             /core/templates/403.php;
      error_page            404             /core/templates/404.php;

    location:

      '~ ^/(data|config|\.ht|db_structure\.xml|README)': 'deny all;'

      '= /data/htaccesstest.txt': |
        return 204;
        access_log off;
        log_not_found off;

      '/': |
        rewrite   ^/.well-known/host-meta       /public.php?service=host-meta       last;
        rewrite   ^/.well-known/host-meta.json  /public.php?service=host-meta-json  last;
        rewrite   ^/.well-known/carddav         /remote.php/carddav/                redirect;
        rewrite   ^/.well-known/caldav          /remote.php/caldav/                 redirect;
        rewrite   ^(/core/doc/[^\/]+/)$         $1/index.html;
        try_files $uri $uri/ index.php =404;

    php5: 'php5_owncloud'
    php5_limit_except: False
    php5_options: |
      fastcgi_read_timeout {{ owncloud_timeout }};


# .. envvar:: owncloud__nginx__upstream_php5
#
# List of PHP upstream server configurations managed by the ``debops.nginx``
# role.
owncloud__nginx__upstream_php5:
  enabled: True
  name: 'php5_owncloud'
  type: 'php5'
  php5: 'owncloud'


# .. envvar:: owncloud__php5__pool
#
# List of PHP pools managed by the ``debops.php5``
# role.
owncloud__php5__pool:
  enabled: True
  name: 'owncloud'
  user: '{{ owncloud_user }}'
  group: '{{ owncloud_group }}'
  pm_max_children: '{{ owncloud_php5_max_children }}'
  php_value:
    output_buffering: '{{ owncloud_php5_output_buffering }}'
    post_max_size: '{{ owncloud_upload_size }}'
    upload_max_filesize: '{{ owncloud_upload_size }}'
    max_input_time: '{{ owncloud_timeout }}'
    max_execution_time: '{{ owncloud_timeout }}'

  ## https://doc.owncloud.org/server/8.1/admin_manual/installation/source_installation.html#using-php-fpm
  environment:
    # HOSTNAME: '$HOSTNAME'
    # TMP: '/tmp'
    # TMPDIR: '/tmp'
    # TEMP: '/tmp'

    ## Fixes warning (ownCloud 8.1): "The test with getenv('PATH') only returns an empty response"
    PATH: '/usr/local/bin:/usr/bin:/bin'

# .. ]]]
