---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# ---------------------
#   Required packages
# ---------------------

# .. envvar:: docker_base_packages
#
# List of base packages to install with Docker
cryptsetup_base_packages:
  - 'cryptsetup'
  - 'parted'


# ----------------------------------------
#   Lists of encrypted filesystems items
# ----------------------------------------

# .. envvar:: cryptsetup_devices
#
# Global definition list of encrypted filesystems.
cryptsetup_devices: []


# .. envvar:: cryptsetup_group_devices
#
# Host group definition list of encrypted filesystems.
cryptsetup_group_devices: []


# .. envvar:: cryptsetup_host_devices
#
# Host definition list of encrypted filesystems.
#
# Example:
#
# * Setup a encrypted filesystem on top of :file:`/dev/sdb5` which will be
#   available after role execution under
#   :file:`/media/name_of_mountpoint_and_device_mapper_target`.
#
# .. code:: YAML
#
#    cryptsetup_host_devices:
#      - name: 'name_of_mountpoint_and_device_mapper_target'
#        ciphertext_block_device: '/dev/sdb5'
cryptsetup_host_devices: []


# --------------------
#   Keyfile settings
# --------------------

# .. envvar:: cryptsetup_keyfile_location
#
# Location where keyfiles are generated and stored on the Ansible controller.
cryptsetup_keyfile_location: "{{ secret + '/cryptsetup/' + ansible_fqdn }}"


# .. envvar:: cryptsetup_keyfile_remote_location
#
# Directory where the keyfiles will be stored in on the remote system.
cryptsetup_keyfile_remote_location: '{{ (ansible_local.root.var
                                      if (ansible_local|d() and ansible_local.root|d() and
                                          ansible_local.root.var|d())
                                      else "/var/local") + "/keyfiles" }}'


# .. envvar:: cryptsetup_keyfile_owner
#
# System user which owns the keyfile(s).
cryptsetup_keyfile_owner: 'root'


# .. envvar:: cryptsetup_keyfile_group
#
# System group which owns the keyfile(s).
cryptsetup_keyfile_group: 'root'


# .. envvar:: cryptsetup_keyfile_mode
#
# File mode used for the keyfile(s).
cryptsetup_keyfile_mode: '0600'


# ----------------------
#   LUKS header backup
# ----------------------

# .. envvar:: cryptsetup_header_backup_remote_location
#
# Directory the header backups from LUKS will be stored in on the remote system.
cryptsetup_header_backup_remote_location: '{{ (ansible_local.root.backup
                                      if (ansible_local|d() and ansible_local.root|d() and
                                          ansible_local.root.backup|d())
                                      else "/var/backups") + "/luks_header_backup" }}'


# .. envvar:: cryptsetup_backup_header
#
# By default save a backup of the LUKS header on the Ansible controller under:
#
# .. code:: YAML
#
#   {{ cryptsetup_header_backup_remote_location + "/" + item.name + "_header_backup.raw" }}
#
# Set to ``False`` to disable it.
cryptsetup_backup_header: True


# -----------------------------------
#   Ciphertext block device options
# -----------------------------------

# .. envvar:: cryptsetup_use_uuid
#
# Use the UUID of the ciphertext block device in :file:`/etc/crypttab` instead
# of the file path given by ``ciphertext_block_device``.
cryptsetup_use_uuid: True


# ----------------------
#   Filesystem options
# ----------------------

# .. envvar:: cryptsetup_fstype
#
# Default filesystem to create and configure in :file:`/etc/fstab`.
cryptsetup_fstype: 'ext4'


# .. envvar:: cryptsetup_mount_options
#
# List of default mount options.
# Multiple options can be separated by comma.
cryptsetup_mount_options: 'user,auto,noatime,nodiratime'


# .. envvar:: cryptsetup_state
#
# Default ``state`` for all devices. Can be overwritten for each device using
# ``item.state``.
cryptsetup_state: 'mounted'


# .. envvar:: cryptsetup_mountpoint_parent_directory
#
# Parent directory under which all encrypted filesystems will be mounted.
cryptsetup_mountpoint_parent_directory: '/media'


# -------------------------
#   Cryptography defaults
# -------------------------

# .. envvar:: cryptsetup_crypttab_options
#
# Default list of options to configure for each device in
# :file:`/etc/crypttab`. Can be overwritten by ``item.crypttab_options``.
# Multiple options can be separated by comma.
# See :manpage:`crypttab(5)` for details.
cryptsetup_crypttab_options: 'luks'

# .. envvar:: cryptsetup_hash
#
# Specifies the hash used in the LUKS key setup scheme and volume key digest
# for luksFormat.
# Corresponds with the ``--hash`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``sha1``.
# Set to ``default`` to use the compiled-in default of cryptsetup.
cryptsetup_hash: 'sha512'


# .. envvar:: cryptsetup_cipher
#
# Set the cipher specification string.
# Corresponds with the ``--cipher`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``aes-xts-plain64``.
# Set to ``default`` to use the compiled-in default of cryptsetup.
cryptsetup_cipher: 'default'


# .. envvar:: cryptsetup_key_size
#
# Sets key size in bits. The argument has to be a multiple of 8. The possible
# key-sizes are limited by the cipher and mode used.
# Corresponds with the ``--key-size`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``256``.
# Set to ``default`` to use the compiled-in default of cryptsetup.
cryptsetup_key_size: 512


# .. envvar:: cryptsetup_use_random
#
# Sets key size in bits. The argument has to be a multiple of 8. The possible
# key-sizes are limited by the cipher and mode used.
# Corresponds with the ``--use-random`` and ``--use-urandom`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is :file:`/dev/urandom`.
# Set to ``default`` to use the compiled-in default of cryptsetup.
cryptsetup_use_random: True


# .. envvar:: cryptsetup_iter_time
#
# The number of milliseconds to spend with PBKDF2 passphrase processing.
# Corresponds with the ``--iter-time`` parameter.
#
# The current default of :command:`cryptsetup` (as shown by
# :command:`cryptsetup --help`) is ``1000`` milliseconds.
# Set to ``default`` to use the compiled-in default of cryptsetup.
cryptsetup_iter_time: 'default'
