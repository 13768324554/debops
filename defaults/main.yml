---

# Enable or disable PKI support
pki_enabled: True

# Enable or disable PKI support
pki: '{{ pki_enabled | bool }}'

pki_acme: '{{ (True
               if ((ansible_all_ipv4_addresses +
                    ansible_all_ipv6_addresses) | ipaddr("public"))
               else False) | bool }}'

pki_internal: '{{ (True
                   if ansible_domain|d(False)
                   else False) | bool }}'

pki_acme_library: 'openssl'

pki_acme_user: 'pki-acme'
pki_acme_group: 'pki-acme'
pki_acme_home: '/run/pki-acme'

pki_acme_default_subdomains: [ 'www' ]

pki_acme_type: 'acme-tiny'

pki_acme_tiny_repo: 'https://github.com/diafygi/acme-tiny'
pki_acme_tiny_version: 'master'

pki_acme_tiny_src: '{{ (ansible_local.root.src
                        if (ansible_local|d() and ansible_local.root|d() and
                            ansible_local.root.src|d())
                        else "/usr/local/src") + "/" + pki_acme_user }}'

pki_acme_tiny_bin: '/usr/local/lib/pki/acme-tiny'

pki_acme_ca: 'le-live'

pki_acme_ca_api_map:
  'le-live':    'https://acme-v01.api.letsencrypt.org'
  'le-staging': 'https://acme-staging.api.letsencrypt.org'

pki_acme_ca_api: '{{ pki_acme_ca_api_map[pki_acme_ca] }}'

pki_acme_challenge_dir: '{{ (ansible_local.nginx.acme_root
                             if (ansible_local|d() and ansible_local.nginx|d() and
                                 ansible_local.nginx.acme_root|d())
                             else "/srv/www/sites/acme/public") +
                             "/.well-known/acme-challenge" }}'

# Default FQDN
pki_fqdn: '{{ ansible_fqdn }}'

# Default domain
pki_domain: '{{ ansible_domain }}'

pki_default_subdomains: [ '_wildcard_' ]

# ---- PKI main options ----

pki_base_packages: [ 'ssl-cert', 'make', 'ca-certificates',
                     'gnutls-bin', 'openssl' ]

# List of additional packages to install
pki_packages: []

pki_root: '/etc/pki'

# Directory and file permissions for public and private data
pki_public_group: 'root'
pki_private_group: 'ssl-cert'
pki_public_dir_mode: '0755'
pki_private_dir_mode: '0750'
pki_public_mode: '0644'
pki_private_mode: '0640'

# Make sure these private system groups exist
pki_private_groups_present: []


# ---- Certificate defaults ----

# Base sign period for "normal" certificates
pki_default_sign_base: '365'

# Base multiplier for Root CA - 10 years
pki_default_root_sign_multiplier: '12'

# Base multiplier for intermediate CA - 5 years
pki_default_ca_sign_multiplier: '10'

# Base multiplier for certificate - 1 year
pki_default_cert_sign_multiplier: '3'


# Default library used to manage the certificates (openssl or gnutls)
# Currently only OpenSSL is fully supported
pki_library: 'gnutls'

# Default certificate realm configured in Ansible local facts for use by other
# roles.
pki_system_realm: 'domain'

# Default CA realm configured in Ansible local facts for use by other roles.
pki_system_ca_realm: '{{ pki_system_realm }}'

# ---- PKI realms ----

pki_inventory_groups: [ 'debops_service_pki' ]

pki_group_realms: []

pki_host_realms: []

pki_default_realms:

  - name: 'service'
    authority: 'service'
    acme: False

  - name: 'domain'

pki_realms: []

pki_dependent_realms: []

pki_default_authority: 'domain'

pki_ca_library: 'openssl'

pki_ca_domain: '{{ ansible_domain }}'

pki_ca_root_dn: [ 'o={{ pki_ca_domain.split(".") | first | capitalize }} Certificate Authority' ]

pki_ca_domain_dn: [ 'o={{ pki_ca_domain.split(".") | first | capitalize }}', 'ou=Domain CA' ]

pki_ca_service_dn: [ 'o={{ pki_ca_domain.split(".") | first | capitalize }}', 'ou=Internal Services CA' ]

pki_authorities:
  - '{{ pki_authorities_ca_root }}'
  - '{{ pki_authorities_ca_domain }}'
  - '{{ pki_authorities_ca_service }}'

pki_authorities_ca_root:
  name: 'root'
  subdomain: 'root-ca'
  subject: '{{ pki_ca_root_dn }}'

pki_authorities_ca_domain:
  name: 'domain'
  subdomain: 'domain-ca'
  subject: '{{ pki_ca_domain_dn }}'
  issuer_name: 'root'

pki_authorities_ca_service:
  name: 'service'
  subdomain: 'service-ca'
  subject: '{{ pki_ca_service_dn }}'
  type: 'service'

pki_dependent_authorities: []

# ---- Copy external files to PKI directories ----

# Using these lists, you can copy arbitrary files from the Ansible Controller to
# remote host's PKI directories. They will automatically be secured with proper
# permissions. If not specified, files will be copied to default PKI realm.

# Examples:
#
#   # Copy a particular certificate file to default realm
#   pki_copy_public_files:
#
#     - src: '/srv/certificates/example.com.crt'
#       dest: 'certs/example.com.crt'
#
#   # Copy a particular private key file to default realm
#   pki_copy_private_files:
#
#     - src: '/srv/certificates/private/example.com.key'
#       dest: 'private/example.com.key'
#
#   # Copy a file to specific realm
#   pki_copy_public_files:
#
#     - src: '/etc/fstab'
#       dest: 'certs/fstab'
#       realm: 'domain'

pki_private_files: []
pki_group_private_files: []
pki_host_private_files: []

pki_public_files: []
pki_group_public_files: []
pki_host_public_files: []

# ---- System CA certificate store management ----

# Set default trust policy for new certificates added to 'ca-certificates'
# system package. Choices: 'yes', 'no'
pki_system_ca_certificates_trust_new: 'yes'

# List of blacklisted CA certificates. You can specify either exact names of
# certificate files or use regular expressions. If a certificate is
# found in both lists, it will be blacklisted.
pki_system_ca_certificates_blacklist:

  # Blacklist CNNIC Root Certificates
  # http://googleonlinesecurity.blogspot.com/2015/03/maintaining-digital-certificate-security.html
  - 'mozilla/CNNIC_ROOT.crt'
  - 'mozilla/China_Internet_Network_Information_Center_EV_Certificates_Root.crt'

  # Blacklist all certificates
  #- '.*'

  # Blacklist all Mozilla certificates
  #- 'mozilla/.*'

  # Blacklist specific group of certificates
  #- 'mozilla/VeriSign_.*'

# List of whitelisted CA certificates. You can specify either exact names of
# certificate files or use regular expressions.
pki_system_ca_certificates_whitelist: []

  # Whitelist all certificates
  #- '.*'

  # Whitelist all Mozilla certificates
  #- 'mozilla/.*'

  # Whitelist specific group of certificates
  #- 'mozilla/VeriSign_.*'

