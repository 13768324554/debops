---

# ---- Application sources ----

# gitlab-shell source and install path
gitlab_shell_git_repo: 'https://gitlab.com/gitlab-org/gitlab-shell.git'
gitlab_shell_git_dest: '{{ gitlab_home + "/src/" + gitlab_shell_git_repo.split("://")[1] }}'
gitlab_shell_git_checkout: '{{ gitlab_home + "/gitlab-shell" }}'

# GitLab CE source and install path
gitlab_ce_git_repo: 'https://gitlab.com/gitlab-org/gitlab-ce.git'
gitlab_ce_git_dest: '{{ gitlab_home + "/src/" + gitlab_ce_git_repo.split("://")[1] }}'
gitlab_ce_git_checkout: '{{ gitlab_home + "/gitlab" }}'


# ---- GitLab version map ----

# This dict is used to map 'gitlab_version' to correct GitLab branch and
# gitlab-shell tag. Versions included below are supported by this role.
gitlab_version_map:

  '6.7':
    shell: 'v1.9.1'
    ce:    '6-7-stable'

  '6.8':
    shell: 'v1.9.3'
    ce:    '6-8-stable'

  '6.9':
    shell: 'v1.9.4'
    ce:    '6-9-stable'

  '7.0':
    shell: 'v1.9.6'
    ce:    '7-0-stable'

  '7.1':
    shell: 'v1.9.6'
    ce:    '7-1-stable'

  '7.6':
    shell: 'v2.4.0'
    ce:    '7-6-stable'

  '7.7':
    shell: 'v2.4.1'
    ce:    '7-7-stable'

  '7.8':
    shell: 'v2.5.4'
    ce:    '7-8-stable'


# ---- GitLab CE installation ----

# List of packages required by GitLab
gitlab_packages: [ 'build-essential', 'zlib1g-dev', 'libyaml-dev', 'libssl-dev',
                   'libgdbm-dev', 'libreadline-dev', 'libncurses5-dev', 'libffi-dev',
                   'libxml2-dev', 'libxslt1-dev', 'libcurl4-openssl-dev',
                   'libicu-dev', 'python-docutils', 'cmake' ]

# List of packages required to specified database
gitlab_database_packages:
  mysql:      [ 'libmysqlclient-dev', 'ruby-mysql' ]
  postgresql: [ 'libpq-dev', 'ruby-pg' ]

# Arguments to use with 'bundle install' for different database servers
gitlab_ce_bundle_install_without:
  'mysql':      'development test aws postgres'
  'postgresql': 'development test aws mysql'


# ---- Database ----

# GitLab MySQL database configuration. Password will be empty by default, or
# retrieved from "secret" directory, if it is enabled
gitlab_database_config:
  mysql:
    hostname: 'localhost'
    username: 'git'
    database: 'gitlabhq_production'
  postgresql:
    hostname: 'localhost'
    username: 'git'
    database: 'gitlabhq_production'
    socket:   '/var/run/postgresql'
    port:     '5432'


# ---- Web server ----

# nginx upstream configuration for gitlab service
gitlab_nginx_upstream:
  enabled: True
  name: 'gitlab'
  server: 'unix:{{ gitlab_ce_git_checkout }}/tmp/sockets/gitlab.socket'

# nginx server configuration for GitLab
gitlab_nginx_server:
  by_role: 'debops.gitlab'
  enabled: True
  default: False
  name: '{{ gitlab_domain }}'
  root: '{{ gitlab_ce_git_checkout }}/public'

  options: |
    client_max_body_size {{ gitlab_nginx_client_max_body_size }};
    error_page 502 /502.html;

  location:
    '/': |
      try_files $uri $uri/index.html $uri.html @gitlab;

    '~ ^/(assets)/': |
      root {{ gitlab_ce_git_checkout }}/public;
      gzip_static on;
      expires max;
      add_header Cache-Control public;

    '/uploads/': |
      gzip off;
      proxy_read_timeout {{ gitlab_nginx_proxy_timeout }};
      proxy_connect_timeout {{ gitlab_nginx_proxy_timeout }};
      proxy_redirect     off;
      proxy_set_header   X-Forwarded-Proto $scheme;
      proxy_set_header   Host              $http_host;
      proxy_set_header   X-Real-IP         $remote_addr;
      proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header   X-Frame-Options   SAMEORIGIN;
      proxy_pass         http://gitlab;

    '@gitlab': |
      gzip off;
      proxy_read_timeout {{ gitlab_nginx_proxy_timeout }};
      proxy_connect_timeout {{ gitlab_nginx_proxy_timeout }};
      proxy_redirect     off;
      proxy_set_header   X-Forwarded-Proto $scheme;
      proxy_set_header   Host              $http_host;
      proxy_set_header   X-Real-IP         $remote_addr;
      proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_pass         http://gitlab;

