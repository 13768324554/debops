#!/bin/bash

# debops-task: run ansible with some customization
# Copyright (C) 2014 Maciej Delmanowski <drybjed@gmail.com>
# Part of the DebOps project - http://debops.org/


# This program is free software; you can redistribute
# it and/or modify it under the terms of the
# GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will
# be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General
# Public License along with this program; if not,
# write to the Free Software Foundation, Inc., 59
# Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An on-line copy of the GNU General Public License can
# be downloaded from the FSF web page at:
# http://www.gnu.org/copyleft/gpl.html


set -e

# ---- Global constants ----

declare -r DEBOPS_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/debops"
declare -r DEBOPS_CONFIG=".debops.cfg"
declare -r DEBOPS_INVENTORY="inventory"
declare -r SCRIPT_NAME="$(basename ${0})"

declare -r DEBOPS_RESERVED_NAMES=( task init update defaults padlock )


# ---- Configuration variables ----

# Don't check SSH fingerprint on connection (to enable, set INSECURE=1 on the
# command line)
[ -z "${INSECURE}" ] && INSECURE=0

# List of possible inventory directories, relative to DebOps root project directory
ANSIBLE_INVENTORY_PATHS=( "ansible/${DEBOPS_INVENTORY}" "${DEBOPS_INVENTORY}" )


# ---- Functions ----

# Find specified file or directory in parent dir (if not specified, finds $DEBOPS_CONFIG)
# Source: https://unix.stackexchange.com/questions/13464
find_up () {
  local name=${1:-$DEBOPS_CONFIG}
  local slashes="${PWD//[^\/]/}"
  local directory="${PWD}"

  for (( n=${#slashes}; n>0; --n )) ; do
    test -e "${directory}/${name}" && echo "$(readlink -f ${directory}/${name})" && return
    directory="$directory/.."
  done
}

# Display error message and exit
error_msg () {
  local severity="${2:-Error}"
  local message="${1}"

  echo >&2 "${SCRIPT_NAME}: ${severity}: ${message}"
  [ "${severity}" == "Error" ] && exit 1
}

# Check if required commands exist
require_commands () {
  for name in ${@} ; do
    if ! type ${name} > /dev/null 2>&1 ; then
      error_msg "${name}: command not found"
    fi
  done
}


# ---- DebOps environment setup ----

# Find DebOps configuration file
debops_config="$(find_up)"

# Exit if we are outside of project directory
[ -z "${debops_config}" ] && error_msg "Not a DebOps project directory"

# Find root of the DebOps project dir
debops_root="$(dirname ${debops_config})"

# Source DebOps configuration file
[ -r ${debops_config} ] && source ${debops_config}


# ---- Main script ----

# Make sure required commands are present
require_commands ansible

# Check if Ansible inventory can be found in local directory
for inventory_path in "${ANSIBLE_INVENTORY_PATHS[@]}" ; do
  if [ -d ${debops_root}/${inventory_path} ] ; then
    ansible_inventory="${debops_root}/${inventory_path}"
    break
  fi
done

[ -z "${ansible_inventory}" ] && error_msg "Ansible inventory not found"

# Get module name from the script name if script is named 'debops-*'
module=""
module_name=${SCRIPT_NAME##*-}
name_match=0
for name in "${DEBOPS_RESERVED_NAMES[@]}" ; do
    if [[ ${name} = "${module_name}" ]] ; then
        name_match=1
        break
    fi
done
if [[ ${name_match} = 0 ]] ; then
    module="-m ${module_name}"
fi

export ANSIBLE_HOSTS="${ansible_inventory}"

# Allow insecure SSH connections if requested
if [ ${INSECURE} -gt 0 ] ; then
  export ANSIBLE_HOST_KEY_CHECKING=False
fi

# Run ansible with custom environment
ansible ${module} "${@}"

